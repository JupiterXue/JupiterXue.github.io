<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>木夜星空的个人博客</title>
    <link>http://JupiterXue.github.io/</link>
    <description>Recent content on 木夜星空的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Aug 2021 22:51:00 +0800</lastBuildDate><atom:link href="http://JupiterXue.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 翻山越岭——解释器</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day10-parser/</link>
      <pubDate>Sun, 22 Aug 2021 22:51:00 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day10-parser/</guid>
      <description>上期文章遗留了一个问题“三个 panic 在 runtime 代码的具体哪个位置输出”，如果通过汇编调试工具找出来。今天来动手实践，并且尝试解决另一个业务问题。 问题回顾</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——语法分析实现</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day9-parsing_implementation/</link>
      <pubDate>Sun, 22 Aug 2021 08:34:33 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day9-parsing_implementation/</guid>
      <description>之前的文章提到：Go 程序编译和链接涉及到工具 go tool compile 、go tool objdump 和 SSA func build 将源代码转化成静态单赋值形式的中间代码。这些工具都可以直接上手玩一玩，即</description>
    </item>
    
    <item>
      <title>2021 08 21 Go Top Day8 Disassembly</title>
      <link>http://JupiterXue.github.io/go-to-top/2021-08-21-go-top-day8-disassembly/</link>
      <pubDate>Sat, 21 Aug 2021 15:25:05 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/2021-08-21-go-top-day8-disassembly/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go 翻山越岭——反编译2</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day8-disassembly/</link>
      <pubDate>Sat, 21 Aug 2021 15:25:05 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day8-disassembly/</guid>
      <description>Go 语言常用的两个查看汇编代码的工具是 go tool compile 和 go tool objdump。上期文章说到通过 go tool compile -S 可以查看实现相同功能，两个不同的代码在性能上有什么区</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——编译与反编译</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day7-assembly/</link>
      <pubDate>Thu, 19 Aug 2021 23:02:38 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day7-assembly/</guid>
      <description>Go 程序，从源代码到可执行文件，通常要经过两个步骤：编译 → 链接，而最重要的就是进行虚拟地址重定位（Relocation）。上期我们了解了GO语</description>
    </item>
    
    <item>
      <title>编译与反编译</title>
      <link>http://JupiterXue.github.io/go-to-top/2021-08-19-go-top-day7-assembly/</link>
      <pubDate>Thu, 19 Aug 2021 23:02:38 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/2021-08-19-go-top-day7-assembly/</guid>
      <description>Go 程序，从源代码到可执行文件，通常要经过两个步骤：编译 → 链接，而最重要的就是进行虚拟地址重定位（Relocation）。上期我们了解了GO语</description>
    </item>
    
    <item>
      <title>编译与反编译</title>
      <link>http://JupiterXue.github.io/posts/2021-08-19-go-top-day7-assembly/</link>
      <pubDate>Thu, 19 Aug 2021 23:02:38 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-19-go-top-day7-assembly/</guid>
      <description>Go 程序，从源代码到可执行文件，通常要经过两个步骤：编译 → 链接，而最重要的就是进行虚拟地址重定位（Relocation）。上期我们了解了GO语</description>
    </item>
    
    <item>
      <title>性感、美食和学术？</title>
      <link>http://JupiterXue.github.io/posts/2021-08-18-sex-research/</link>
      <pubDate>Wed, 18 Aug 2021 22:01:22 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-18-sex-research/</guid>
      <description>当我们的开始看论文、接触到学术研究后会形成一个感知：科研工作往往都是在进行复杂的实验、写出带有各种样式的图表和复杂的数学公式，最终生成的长篇</description>
    </item>
    
    <item>
      <title>写技术文章的要点</title>
      <link>http://JupiterXue.github.io/posts/2021-08-16-tech_write/</link>
      <pubDate>Mon, 16 Aug 2021 22:52:49 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-16-tech_write/</guid>
      <description>磨刀不误砍柴工，程序员在写代码、写文章之余还是值得去了解重构代码、测试代码、如何写文章等辅助性的技能，虽然有时有点务虚，但从长远看却是实打实</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——编译原理基础</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day6-parse/</link>
      <pubDate>Sun, 15 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day6-parse/</guid>
      <description>上回我们说到 8 个常见 Go 业务场景，并且可以通过探究 Go 语法背后的秘密就能去解决的问题，在我们开始动手之前，先打好“Go 语言中编译原理的基础” 回顾</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——编译原理基础</title>
      <link>http://JupiterXue.github.io/posts/2021-08-15-go-top-day6-parse/</link>
      <pubDate>Sun, 15 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-15-go-top-day6-parse/</guid>
      <description>Go 程序，从源代码到可执行文件，通常要经过两个步骤：编译 → 链接。看似简单，但其中蕴藏着极大的能量，尤其在面对不能一时半会就解决的业务场景中，稍</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——常见业务问题</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day5-problem/</link>
      <pubDate>Sat, 14 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day5-problem/</guid>
      <description>上回说到通过工具 readelf 和 dlv 调试 Go 语言程序，为什么需要这么做调试代码呢？我单纯地想写个代码，不行吗，常见业务不都是代码实现没有听谁说过要进行底层调</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——常见业务问题</title>
      <link>http://JupiterXue.github.io/posts/2021-08-14-go-top-day5-problem/</link>
      <pubDate>Sat, 14 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-14-go-top-day5-problem/</guid>
      <description>上回说到通过工具 readelf 和 dlv 调试 Go 语言程序，为什么需要这么做调试代码呢？我单纯地想写个代码，不行吗，常见业务不都是代码实现没有听谁说过要进行底层调</description>
    </item>
    
    <item>
      <title>七夕荐电影《当男人恋爱时》</title>
      <link>http://JupiterXue.github.io/posts/2021-08-13-when-man-love/</link>
      <pubDate>Fri, 13 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-13-when-man-love/</guid>
      <description>明天就是七夕节了，本来今天应该更技术文章，暂时放一放，让美好暂留一天，今天来聊一部爱情电影。 爱情并不完美，而爱情电影往往都是那么天真浪漫，这</description>
    </item>
    
    <item>
      <title>论—如何看论文与写技术文章</title>
      <link>http://JupiterXue.github.io/posts/2021-08-12-write/</link>
      <pubDate>Thu, 12 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-12-write/</guid>
      <description>最近成长会的小伙伴推荐了一个系列讲座“2021年“研究生科研素养提升”系列公益讲座”，看到这个题目，不禁联想起自己大学最初的梦想，如果，如果</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调试2</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day4-run/</link>
      <pubDate>Wed, 11 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day4-run/</guid>
      <description>上回我们说到，利用调试工具 readelf 读取我们在 Linux 上编译的可执行文件 hello，并且找到了查看 Go 底层的入口 entry point address，今天我们尝试踏进底层调试</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调试2</title>
      <link>http://JupiterXue.github.io/posts/2021-08-11-go-top-day4-run/</link>
      <pubDate>Wed, 11 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-11-go-top-day4-run/</guid>
      <description>上回我们说到，利用调试工具 readelf 读取我们在 Linux 上编译的可执行文件 hello，并且找到了查看 Go 底层的入口 entry point address，今天我们尝试踏进底层调试</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调试1</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day3-run/</link>
      <pubDate>Mon, 09 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day3-run/</guid>
      <description>今天来动手实践看看，Go 的底层是如何运作、如何进行调度的，通过调试一段简单的代码，我将带你体验 Go 语言如何接触底层的知识。不会很复杂的，跟着我</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调试1</title>
      <link>http://JupiterXue.github.io/posts/2021-08-09-go-top-day3-run/</link>
      <pubDate>Mon, 09 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-09-go-top-day3-run/</guid>
      <description>今天来动手实践看看，Go 的底层是如何运作、如何进行调度的，通过调试一段简单的代码，我将带你体验 Go 语言如何接触底层的知识。不会很复杂的，跟着我</description>
    </item>
    
    <item>
      <title>微信公众排版</title>
      <link>http://JupiterXue.github.io/posts/2021-08-08-wxpb/</link>
      <pubDate>Sun, 08 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-08-wxpb/</guid>
      <description>已经开通微信公众号两周了，但公众号的发文机制和排版机制让我有些头疼，今天来探讨一下——微信公众号的排版与运作机制，先列出我在这里写作最直观的</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调度-day2</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day2-scheduler/</link>
      <pubDate>Thu, 05 Aug 2021 14:45:19 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day2-scheduler/</guid>
      <description>上回说到 Go 的调度流程本质上是⼀个⽣产-消费流程，今天来讲一讲“调度组件与调度循环”，再来回顾一下两个生动的动画 goroutine 的⽣产端, goroutine 的消费端。 当 goroutine 处</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调度-day2</title>
      <link>http://JupiterXue.github.io/posts/2021-08-05-go-top-day2-scheduler/</link>
      <pubDate>Thu, 05 Aug 2021 14:45:19 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-05-go-top-day2-scheduler/</guid>
      <description>1 2 3 4 5 6 7 package main // sd1 func main() { // test }</description>
    </item>
    
    <item>
      <title>如何在 Go 高级工程师训练营生存</title>
      <link>http://JupiterXue.github.io/posts/2021-08-04-how-to-survive-in-senior-go-class/</link>
      <pubDate>Wed, 04 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-04-how-to-survive-in-senior-go-class/</guid>
      <description>前言 大家好，我是 Jupiter，目前从事的是 Pyhon 和 Go 的后端开发，现在是我们 Go 高级工程师第一期的学员，也是 3 班 7 组的组长。这周三的时候谢大邀请我</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调度-day1</title>
      <link>http://JupiterXue.github.io/go-to-top/go-top-day1-scheduler/</link>
      <pubDate>Tue, 03 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/go-to-top/go-top-day1-scheduler/</guid>
      <description>前言 Go 语言是一门入门容易深入难的编程语言。说得好像其他编程语言就有入门难深入简单的？其实每一门编程语言要深入学习都会有不一样的壁垒与门槛，只</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调度-day1</title>
      <link>http://JupiterXue.github.io/posts/2021-08-03-go-top-day1-scheduler/</link>
      <pubDate>Tue, 03 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-03-go-top-day1-scheduler/</guid>
      <description>前言 Go 语言是一门入门容易深入难的编程语言。说得好像其他编程语言就有入门难深入简单的？其实每一门编程语言要深入学习都会有不一样的壁垒与门槛，只</description>
    </item>
    
    <item>
      <title>Go 翻山越岭——调度-day1</title>
      <link>http://JupiterXue.github.io/posts/2021-08-03-scheduler/</link>
      <pubDate>Tue, 03 Aug 2021 09:38:51 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-03-scheduler/</guid>
      <description>前言 Go 语言是一门入门容易深入难的编程语言。说得好像其他编程语言就有入门难深入简单的？其实每一门编程语言要深入学习都会有不一样的壁垒与门槛，只</description>
    </item>
    
    <item>
      <title>从“名家谈写作”我学到了什么</title>
      <link>http://JupiterXue.github.io/posts/2021-08-02-learn-from-top-writer/</link>
      <pubDate>Mon, 02 Aug 2021 09:36:25 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-08-02-learn-from-top-writer/</guid>
      <description>下定决心想要做好写文章的习惯。给自己树立的目标是先行动起来，并且完成不那么困难的事情，当行动系统建立起来了，当日毕日更做到了，再是说更高的目</description>
    </item>
    
    <item>
      <title>Grafana 条形图实践</title>
      <link>http://JupiterXue.github.io/posts/2021-07-29-grafana-bar-chart/</link>
      <pubDate>Thu, 29 Jul 2021 09:56:39 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-07-29-grafana-bar-chart/</guid>
      <description>前言 可视化平台有很多，最重要的是选择符合业务需求的方案，费用低、学习曲线低、易于上手、集成性好这些都是加分项。众望所归，我选择了 Grafan</description>
    </item>
    
    <item>
      <title>Python 答疑复盘</title>
      <link>http://JupiterXue.github.io/posts/2021-07-28-python-replay/</link>
      <pubDate>Wed, 28 Jul 2021 09:49:15 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-07-28-python-replay/</guid>
      <description>在成长会中，我们会自发组建小组学习各种知识与技能，比如新概念英语朗读、经济学专题晨读、瘦下来、相亲、太极、书法、早起锁定以及 Python 基础入门小组。</description>
    </item>
    
    <item>
      <title>Go 实用小工具</title>
      <link>http://JupiterXue.github.io/posts/2021-07-26-go-tools-kit/</link>
      <pubDate>Mon, 26 Jul 2021 11:00:46 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-07-26-go-tools-kit/</guid>
      <description>Go 小工具 执行命令行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;runtime&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { // flag 包使用方法：flag.Type</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://JupiterXue.github.io/about/</link>
      <pubDate>Sat, 24 Jul 2021 17:51:42 +0000</pubDate>
      
      <guid>http://JupiterXue.github.io/about/</guid>
      <description>Github: Jupiter</description>
    </item>
    
    <item>
      <title>王垠的智慧</title>
      <link>http://JupiterXue.github.io/posts/2021-07-23-idea-from-wangyin/</link>
      <pubDate>Fri, 23 Jul 2021 18:21:05 +0800</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2021-07-23-idea-from-wangyin/</guid>
      <description>王垠的智慧 王垠是谁？去谷歌知乎简单搜搜就能很快知道这个大名鼎鼎之人。对我来说，他是具有叛逆精神、擅长质疑与逻辑推断的人。他的求学经历让我感到</description>
    </item>
    
    <item>
      <title>Algorithms - Graphs</title>
      <link>http://JupiterXue.github.io/posts/2020-05-01-algorithms-graphs/</link>
      <pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2020-05-01-algorithms-graphs/</guid>
      <description>Undirected Graphs Some problems  Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once  classical NP-complete problem.   Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical?  No one knows so far. A lonstanding open problem    Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description>
    </item>
    
    <item>
      <title>Racket notes</title>
      <link>http://JupiterXue.github.io/posts/2020-02-29-racket/</link>
      <pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2020-02-29-racket/</guid>
      <description>Basic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  #lang racket (provide (all-defined-out)) ;this is a comment (define s &amp;#34;hello&amp;#34;) (define x 3) (define y (+ x 2)) (define cube1 (lambda (x) (* x (* x x)))) (define cube2 (lambda (x) (* x x x))) (define (cube3 x) (* x x x)) (define (pow1 x y) (if (=y 0) 1 (* x (pow1 x (- y 1))))) ; currying (define pow2 (lambda (x) (lambda (y) (pow1 x y))))   List  Empty list: null  () doesn&amp;quot;t work for null but &#39;() does   build a list: (list e1 .</description>
    </item>
    
    <item>
      <title>ruby学习笔记</title>
      <link>http://JupiterXue.github.io/posts/2016-12-08-ruby-notes/</link>
      <pubDate>Thu, 08 Dec 2016 22:54:49 +0000</pubDate>
      
      <guid>http://JupiterXue.github.io/posts/2016-12-08-ruby-notes/</guid>
      <description>regular expressions =~是用于正则表达式的匹配操作符。返回匹配到的字符串位置或nil。 1 2 &amp;#34;abcdef&amp;#34; =~ /d/ # return 3 &amp;#34;aaaaaa&amp;#34; =~ /d/ # return nil !和? The exclamation point (!, sometimes pronounced aloud as &amp;ldquo;bang!&amp;quot;) indicates something potentially destructive, that is to say, something</description>
    </item>
    
  </channel>
</rss>
