<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂谈 on 木夜星空的个人博客</title>
    <link>https://jupiterxue.github.io/tags/%E6%9D%82%E8%B0%88/</link>
    <description>Recent content in 杂谈 on 木夜星空的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>JupiterXue</copyright>
    <lastBuildDate>Wed, 26 Jan 2022 21:55:21 +0800</lastBuildDate><atom:link href="https://jupiterxue.github.io/tags/%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的2021年度关键词</title>
      <link>https://jupiterxue.github.io/posts/2022-01-26-happy_birthday_25/</link>
      <pubDate>Wed, 26 Jan 2022 21:55:21 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2022-01-26-happy_birthday_25/</guid>
      <description>嘿哈，没想到上次更文到今天文章，又拖了近一个月。
这篇文章，希望用不同的方式进行创作，以探索领域+年度关键词方式，总结我在 2021 年的成长与收获，不如就先从我所在的行业开始说起吧。
技术 沉淀 我最早的技术方向是 Python 爬虫，但由于行业敏感就在去年换了一份容灾备份的新型互联网工作，用 Python + Go 混合开发做 Web 和系统底层插件的开发。这份工作一直持续到现在，是我技术沉淀最多的，也比较满意的。这一年里，做了三个全栈小项目，制作了有点酷酷的监控系统，了解熟悉了常见的大数据组件，对各平台自动化打包软件有了熟悉，最重要的是，对数据的管理，数据的备份和恢复有了深入的了解。
也很感谢领导对我这个刚入行的小白一直很耐心地指导，基本上每次出现问题都能冷静分析，适宜提出解决方案。又或者让我去做一些调研，设计一些方案，让我突破了自己“程序员”的狭小视角，往更广的系统底层、系统结构方向去看。
跃迁 这一年也是我对 Golang 技术从刚只会一点点语法基础，到会做项目、会写算法的一个融会贯通多次跳跃的时期。21年4 月份的时候，领导交给我一个 Go 的开发任务，看了近一周，发现自己还吃不下来，于是想上知乎找 Go 语言入门级项目看看，就遇到了国内 Go 语言的布道者，谢大。他的座右铭到现在，我都还记得“成功的习惯比成功更重要”，翻看了他的几个回答也非常深刻，是有些崇拜的。
后来正好在 5月份的时候，由谢大组织，曹大授课，创办了Go 高级工程师训练营。为了进一步认识谢大，精进 Go 语言，我也吭哧吭哧参与了，还做了一个小组组长。虽然后来在小组中没有和大家互动起来，不过也主动去整理资料，承担起了一项工作，没想到谢大还送了一件 Gopher China 的卫衣。
但由于曹大的课实在有难度，我连 Go 初级工程师都算不上，就直接上高级了，吃不消、消化不良是肯定的。第一期结束，很多不懂的地方，还准备继续参加第二期，没想到谢大给我说，你还需要二进宫啊。消极了一阵子，随后认真思考了，确实不能一直让老师一直带，需要自己突破舒适区。于是开启了公众号写作，将在曹大课上的内容重新回顾，梳理成了文章。现在发现，这个过程可能比再次参加效果好些，虽然没有多少自己创新的东西，但每个字都是自己打的，多数图片时自己重新画的，每一步都是踏踏实实的。
再后来，组织了几期 LeetCode 小组，对 Go 的数据结构和算法有了更多基础性的提升。包括公众号写作、LeetCode小组，都源于一手创办成长会的S 老师，后面会再讲到小组。
场景 Go 高级训练营结束，也认识了一个大佬 Helios，他组织了一期《DDIA》的读书活动。我参与其中，并在阅读完成之后提出了一些问题。印象最为深刻的是，在讨论到分布式数据库设计时，我搞不清楚为什么需要有那么多中关系数据库啊、非关系数据库啊、图结构等，Helios 的回答一语道破：主要还是场景不一样。这句话其实对我后半年影响很深，包括在读书时也很注意到场景，对问题的分析有了一个抓手。当遇到问题时，不是想到用什么工具，用什么高大上的技术，而是考虑场景，考虑问题的本质。
就如吴声所说：产品解决一个问题，场景持续解决问题。（在罗振宇跨年演讲中很有体会）
抽象与重构 随着代码的不断积累，项目越做越多，会发现自己写的一些代码是能够复用的。但问题在于，如果代码本身不够精简，会造成代码看起来非常臃肿。工作期间，看到了同事写的非常优美的代码；做了一个传统 Web 后端项目，参考了现有的一个前后端分离项目《Full Stack FastAPI and PostgreSQL》里面的优秀设计，也正是从这个项目开始，终于意识到将文件分类存放、公共方法抽象、业务逻辑剥离、精简函数复用等等。
还有个原因在于自己在成长会开发了一个作业统计小程序，为了方便其他队长和成员使用，开源了源码。有人在我的代码上二次开发，也有人参考了我的项目逻辑开发了新的功能。但我最早开发的版本代码不多，不过都是按面向过程的方法来开发的，到了现在功能多了，代码看起来很臃肿丑陋。因此对自己的代码进行了面向对象的抽象和文件拆分。毕竟，见代码如见人。
架构 这个词很分量很重，我觉得还拿不起，但我会努力的。包括在平时，同事开玩笑说我这也学那也学，怎么不去学架构；在工作中，前任领导招我进公司希望我设计中心系统（那时没工程经验，弄砸了），现领导对我的信任让我设计新版公司业务平台；在读《DDIA》期间，了解了许多优秀设计。我慢慢明确了自己职业的方向，架构师。
关于架构师的工作内容，到现在我还并不了解，也会在今年去做些探索。包括读一些底层架构的书，做一些系统设计等。
 也是从 21年 年初的时候，就开始跟着成长会晨读读了几本不同领域的书，包括不限于：保险学、经济学、教育学等。虽然读得不怎么好，但想来回顾这个过程中的一些收获。
保险学 风险 我们一定需要买保险吗？保险来源于风险的对冲，风险却是现实世界中客观存在，具有损失性和不确定性的状态。脱离了风险、没有风险，也就没有必要购买保险。而在具有不同风险情况下购买相应的保险才更划算。
损失 还记得那时候正处于重疾险进行改革，大变天的时期，各大自媒体都在吹捧重疾险，而作为保险小白感知度非常低，我没有采取任何的行动，现在看来还是多少有点遗憾，自己可能用不到，其实还可以给父母买。</description>
    </item>
    
    <item>
      <title>最后一个月了，还能再加把劲吗</title>
      <link>https://jupiterxue.github.io/posts/2021-12-02-november_replay/</link>
      <pubDate>Thu, 02 Dec 2021 15:47:56 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-12-02-november_replay/</guid>
      <description>又到了今年的最后一个月，既是激动人心的时候，也是紧张焦虑的岁月。公司里会想着冲冲业绩，考研人会想着最后考试的冲刺。他们都有各自的目标，彷徨又奋力地前行，也许不会那么轻易成功，但都希望明年有个好的开始。是非成败进退难断，举步维艰不断亦难。生有去处，归途又在哪里？我想，出路可能就在，复盘上。
借以此文，来复盘自己 11 月发生的一些点点滴滴，为 12 月做个计划，给今年划上个圆满句号吧。在我 11 月的时候，主要做了两件事，一个是写作，一个是 Leetcode 刷题：
写作 加入小组真的是写作的原动力。还记得 8 月初的时候，加入了一个千字写作小组。以日毕的形式存活到了最后 9 月份结束。那时候基本每个工作日都会更文，即便有一天断了，也会在周末的时候补上并且多写一篇。小组结束后的一周，还能更新几篇文章，并且自认为不需要小组就能继续更文。没想到，，下一次更新文章却是在 10 月中旬的时候了。
 日毕：工作日完成指定的目标，比如写文章，或看书，或做题等。
 也是在 10 月底的时候，又参加了一起千字写作小组。重新捡回了更文的节奏。现在是每天都能准时更新完成文章，没有补的情况，周末偶尔会多写一篇文章的样子。
从上期小组到这期小组，差不多更新了 60 篇文章，也慢慢地形成了我自己更文的一个体系。最开始我认为技术文是很难更得动的，即便是有小组加持还是心有余而力不足。所以采取一天更新技术文，一个更新杂谈（写作/编程/工具/思考）。没想到这个模式一直延续到了现在，我也比较喜欢和适应这个节奏。
技术文 开通公众号，我最想完成的，就是技术的积累和沉淀。所以现在的节奏都是一周有三天都更新技术文，两天更新杂文。在一次线下活动中，我深刻认识到了概念的力量。如果能够用自己的话、或用另外一个体系的话术来阐述一个专业领域的概念。当掌握了 1000个概念了，就可以开直播讲课了。
现在写的技术文章，其实也是来源于曹大开的一门高级工程师的课。当时听课的感觉不是似是而非，不是云里雾里，而是要么腾云驾雾要么如细致入微的核舟记。正课上老师讲的很细，不仅有文字图片，还有超赞的动画。每堂课还有答疑，同学们问的 99% 的问题我都没见过，而老师都能有条不紊、有理有据地回答出来。
曹大 Xargin，大概是我目前见过最厉害的工程师了。一门技术，能够做到有深度已经非常不容易。而要是对众多技术都或多或少有了解，并且能够对各种业务场景提出解决方案，这大概是顶级程序员了吧。
即兴写作 在写杂文的时候，我专门建立了一个文档，用来存放平时生活中产生的灵感、无意间刷到的主题，我把这个文档称之为“即兴写作”。因为主题众多，每次轮到写在我看来是“水文、杂文”的时候，就拿出来看一看。因此每次要写文章的时候，不是技术文就是有明确观点的文章，看到写作小组的同学对没有主题写感到苦恼，而我却会心一笑。
不过最让我惊讶的是，在我看来写得很烂的一篇文章，在发出去当时就想删除的文章。也没做推广，没想到后来有一点阅读量，2w 人阅读了。
其中有几篇文章是我和一些小伙伴在交流当中产生的灵感，随即写的文章，并且，以文交友。这大概是我在写作中最大的收获之一了，如下：
 在写作小组中，我们自发组合了同桌，我的同桌是位国内国籍，在北美结婚暂居的伙伴。她写了一篇关于自己英语学习的经历，总结了一些有用的建议。看了她的文章，和她交流发现她最近在学编程。那么正好，我就模仿她的写作风格来写了自己的编程学习经历。 最开始在公众号写作，我很不适应不用 markdown 来写文章，主要是排版问题。随后找了比如秀米，135。这些模板在我看来虽然功能丰富，但显得花里胡哨，而我只想追求简洁、简约的风格，所以就放弃了。直到想起了之前用的 Typora，就捡起来用到写作当中，然后写了些关于用 Typora 写公众号文章的技巧。后来有差不多 3 个小伙伴都来问我这个的时候，我也写了点偏教程型的文章予以回复。 然后是在 Leetcode 小组中，有个同学看我公众号写作了很多技术文，希望希望我分享一些关于技术的心得体会，我也认真准备了几千字的逐字稿和配图阔爱的 PPT，不负众望。 然后是我无意间告诉了一个非计算机专业同学一点小小的建议，她还来感谢了我。于是又对自己之前的想法做了剖析，并且给出了一些更好的建议。  不足与反思 虽然写文很有收获，但仍然有些很大的短板需要补充，比如：
 自己在文章中思考的还有很多不足。重要的还是概念能力，对现实的抽象，多抽象的描述，对概念的拆解等等。这些东西表现在文章中可能是更加生动的图画，绘声绘色的语言，和引人入胜的故事，都是需要可以去学习、可以去练习和使用的。 推文晚很严重。由于微信公众号每天只有一篇可以群发的机会，如果超过 12 点就会清零重置。而我大多数文章都是写在 23:30 之后的。如果出现些意外容错性真的非常差，好在还没有出现过。并且现在清晰认识到这个问题，在努力克服中。 对读者的理解不多。我写的文章其实没有说专门为了取悦哪些读者，反而更多时候是在取悦我自己。尤其写完一篇几千字的文章，自豪感油然而生。但却忽略了读者想看写什么，措辞是否得当。因此也没有完全写技术文，而是穿插着写杂文。 公众号推广不足。都说微信公众号是个封闭的空间，如果不去推流是不会有人看，不会有新人关注自己的。看到其他的小伙伴专门去诸如朋友圈、简书、小红书、知识星球发文，而我还停留在公众号中，并且连公众号的一些基本功能都没有用熟悉。这些都是我自己的舒适圈外的东西，需要刻意地去打破，否则一直会固守下去。（比如今天学会了开赞赏）  Leetcode 10 月初的时候，我召集了几个学过点编程的小伙伴，组建了一个 Leetcode 刷题小组，随后又运营了二期，三期、四期我都叫由小组的另一位更加积极刻苦的同学来运营，因为我要写文章，没时间管理的原因。</description>
    </item>
    
    <item>
      <title>反法西斯胜利，再读《毛选》</title>
      <link>https://jupiterxue.github.io/posts/2021-09-03-anti-jp-victory/</link>
      <pubDate>Fri, 03 Sep 2021 23:00:50 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-03-anti-jp-victory/</guid>
      <description>今天是个特殊的日子，9月3日更是个特殊的日子，从1945年开始的到今天、以后每年的9月3日也是最为特殊的日子——中国抗日战争胜利纪念日、世界反法西斯战争胜利纪念日。虽说是纪念战争胜利，但那个人伏案奋笔疾书的样子依旧在我心头萦绕，他就是我们可爱的毛委员。
大家都习惯尊称他为毛主席称，其实毛主席更希望群众称他为“毛委员”。在1927年3月完成的《湖南农民运动考察报告》后，他提到：“我到各处，常常遇到这种人，这样向我求情：‘请省里来的委员作保！’，自此大家都开始称他为，毛委员。
再读《毛选》 今天又重新翻了翻折满边边角角的《毛选》，按照时间线简单梳理了几篇比较耐看的文章：
第一卷：
 《中国社会各阶级的分析》	《湖南农民运动考察报告》
《中国的红色政权为什么能够存在？》 《星星之火，可以燎原》
《反对本本主义》	《论持久战》
《论反对日本帝国主义的策略》	《中国革命战争的战略问题》
《实践论》	《矛盾论》
 第二卷：
 《〈共产党人〉发刊词》	《新民主主义论》
 第三卷：
 《论联合政府》
 想到了什么 谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。中国过去一切革命斗争成效甚少，其基本原因就是因为不能团结真正的朋友，以攻击真正的敌人。——《中国社会各阶级的分析》
在真实世界有很多以上类似的情况，一个东西的表现和本质有差异。我们应该更多地在于发现一个事物它本来的样子，然后去接受它本来的样子，而不应该以我们自己的设想去看事情。
许多农民运动的道理，和在汉口、长沙从绅士阶级那里听得的道理，完全相反。——《湖南农民运动考察报告》
当你开始做一些事情的时候，有些东西和成长励志故事的逻辑是相反的。
有些同志在困难和危机的时候，往往怀疑这样的红色政权的存在，而发生悲观的情绪。这是没有找出这种红色政权所以发生和存在的正确的解释的缘故。——《中国的红色政权为什么能够存在？》
有些人会害怕走弯路，但只要花费了脑力、体力一定会有收获的。尤其做难事必有所得。
我们在红军中工作的人，一遇到败仗，或四面被围，或强敌跟追的时候，往往不自觉地把这种一时的特殊的小环境，一般化扩大化起来，往往不自觉地1把这种一时的特殊的小环境，一般化扩大化起来，仿佛全国全世界的形式概属未可乐观，革命胜利的前途未免渺茫得很。—— 《星星之火，可以燎原》
有些时候我们遇到小问题，会把它推演的过于悲观
中国全国都布满了干柴，很快就会燃成烈火。—— 《星星之火，可以燎原》
任何前进的方向，都有失败的可能。但对未来的良好信心，来自于一个基本面的判断。当抓好了基本面，就不怕上上下下的起伏。
结语 其实，《毛选》不仅仅是军事战略者常看的书，现今天的创业者也很热衷于此，更让你我没想到的是，还有一篇文章叫做《婚恋大事问毛选》。可以说《毛选》已经进入了我们家家户户，承载了我们中华文明最灿烂的一刻。
推荐大家去看一部电影，最能近距离感受到毛委员的亲切——《古田军号》。故事情节紧凑，人物细致，尤其细节做得很好，陈毅反复划窗以表思念、毛泽东得了疟疾而党员们在想怎样给他弄到金鸡纳霜治疗、朱毛会师时双手握手的交付，新泉会议时朱毛同板凳共思想屁股决定脑袋等等。
最后，感谢毛委员，给了我们这样一个盛世。</description>
    </item>
    
    <item>
      <title>微信公众排版</title>
      <link>https://jupiterxue.github.io/posts/2021-08-08-wxpb/</link>
      <pubDate>Sun, 08 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-08-wxpb/</guid>
      <description>已经开通微信公众号两周了，但公众号的发文机制和排版机制让我有些头疼，今天来探讨一下——微信公众号的排版与运作机制，先列出我在这里写作最直观的感受：
 不能用 Markdown 写文章，识别不出来，空行也会被解析掉。 一天只能发布一篇文章，第二天才有新的可发布量。 可以修改文章，但修改后的关注公众号的读者看的文章还是以前的文章。 修改后想让读者看到，就需要重新发一篇，以前的会保留。  所以我的问题来了：
 文本输入不能支持 Markdown 语法那支持什么语法？还是说有什么办法可以转化？ 一天只有一篇文章的发布量，是否有什么方法增加发布量？或者说有预发布功能？ 想要修改文章、能够让读者看见，又不减少发布量，有可行的方法吗？  作为程序员，我们一般习惯用 Markdown 来写文章，因为排版的方式有点类似于代码的方式，并且操作的方式也类似于编码的方式，有快捷键、能插入不同语言代码。如果你想试用，这里推荐你试用一下 Typora，一个看起来非常的美观的基于 Markdown 的编辑和预览器，这个软件还有一个视图查看方式就叫做“源代码模式”。但是问题就出在，直接复制用 Markdown 写好的源代码文章，粘贴到微信公众号却不能直接识别出来，里面的文本和标识符识被识别为了纯文本，空行没有了，文字上的超链接没有了，图片也没有了。真的有点，气急败坏。然后尝试直接复制 Typora 预览模式下的文章到公众号。确实效果达到了，但也出现了一个问题：用了引用的格式却不能删除、多复制了几段空行却不能删除。又是气急败坏，去找了下解决方案，一开始找到了网站 Mardkown 转 微信公众号，经过一次尝试发现有的图片没有加载进去，遂放弃。后来几经折腾发现还是这个网站有用。第一次真的眼睛瞎了，为啥没尽早用到！！
官方怎么说 下午的时候对以前发过的公众号文章做了修改，但是只有自己能够看到。已经关注的粉丝（粉丝竟是我自己）查看文章还是原来的样子。所以去看了看一些资料，惊奇地发现，能改内容，但是：
 已群发的图文消息可以修改，其他类型消息暂不支持。每篇图文支持修改1次，且最多可以修改10个错别字（注：标点、英文、数字、空格都计算在内），支持增删。 如果要修改需要：登录微信公众号电脑端 → 首页 → 已群发 → 消息列表 → 悬停点击已群发单篇图文上有个“改”的按钮，点击即可打开修改页面，修改提交后需要管理员微信扫码验证。 微信官方希望每条推送都是公众号运营者深思熟虑的结果。秉承对读者负责的原则，更好的保证用户的阅读体验，修改五个以下的错别字也是为了尽量避免出现重复阅读时内容上前后不一致的情况。 推送到用户端的内容无修改权限，不仅仅是为了尊重用户前后一致的感知，技术上也不能对用户端的内容做修改。 有两种情况无法修改：一、辟谣：文章被发起辟谣且待审核或文章被发起辟谣且审核通过；二、已删除的文章。  总之，写公众号都是在每次深思熟虑之后再写，并且今天在探索后发现，还有预览的功能。
最后的最后，不要水微信公众号，不然又浪费一天 （的发布量）：）。
一些常识和技巧  不加首行缩进。 默认微信字体 16 号，建议用 15 px。粘贴字体进入微信后，先全选“清除格式”（或者 Ctrl+shift+V，直接祛除格式粘贴），就会变成微信默认字体，再选中 15 px 字体 间距 1.5 当文字之间有图片时，上下空一行。给受众呈现更好的阅读体验。 段落保持在三思行。 两端缩进。更适合手机阅读，看起来更有质感。但不太适合代码阅读，因为展示面小了点。 GIF动图。保存动图时需注意格式应为GIF格式且不能大于2M。 永久链接。即预览文章，如果需要别人帮忙改，预览的链接具有时效性。所以去用户界面找到自己的微信，把你想要预览的文章发给自己即可【注意:48小时内自己与自己的公众号互动才行】  常用编辑器好用推荐   秀米 主要用。 有非常多的漂亮模板，可以粘贴全部或部分。</description>
    </item>
    
    <item>
      <title>如何在 Go 高级工程师训练营生存</title>
      <link>https://jupiterxue.github.io/posts/2021-08-04-how-to-survive-in-senior-go-class/</link>
      <pubDate>Wed, 04 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-04-how-to-survive-in-senior-go-class/</guid>
      <description>前言 大家好，我是 Jupiter，目前从事的是 Pyhon 和 Go 的后端开发，现在是我们 Go 高级工程师第一期的学员，也是 3 班 7 组的组长。这周三的时候谢大邀请我来做个学习交流，很荣幸能有这样的机会给大家做个这样的交流。
一听到第一期学员，大家是不是觉得很厉害的样子。啊，没错，面向谷歌编程，复制粘贴代码的能力还是挺厉害的。不是，这期训练营教会我的当然不是复制粘贴那么简单，而是一个全方面的提高、一次格局拓展的经历。
像大家一样，看到有这么一个大咖云集的训练营，曹大、谢大、askuy、小 R 大（额，这里有的套娃）、听闻、邓大明、博锋，已经热血沸腾。再看了看价格，也不算很贵。相比于出门左转右转看到的黑马达内千峰，在价格上已经比较低了。机不可失时不再来，如果要问还有没有下一期，那可能我们第二期可能就是最后一期，嗯，最后一个第二期。
制定学习计划 在这次训练营开始前 5 月初时候，我是有点焦虑的。我是从 Python 转到 Go，几乎是没有什么 Go 基础，而这个训练营是面向 Go 高级工程师的。好像大家常见的语言转换和零基础，都被我撞上了。好在开营还有十多天，我做了两件事，让我在后面的学习节奏保持一个相对稳定的状态。
第一个就是制定学习计划。为期四个月的时间，120天，我很期待这期间所能够发生的许多奇妙化学反应。像往常一样，课前XXX，课中XXX，课后XXX。
课前：
   学习工具：搭建好环境、购买好 tizi 和相关工具 预习：把曹大推荐资料都读完，课程大纲自己绘制熟悉于心 问题：每次提前阅读完材料，一定要带着问题去听直播    课中：
   社群：积极参与任务，主动担当队长、副队长、主动去整理资料告知信息争做小助手 社区：每日浏览 GoCN 新闻，浏览关注的Go博主公众号和 Up 主视频 直播课堂：每次直播课都准时到，积极参加回答 大佬：多和老师曹大、助教、谢大沟通    课后：
   整理课堂笔记，发知识星球或者成立小组。整理出 github 博客 每次作业最迟第二天完成，不拖到第三天。 每天掌握一个面试问答。需要记录下来，整理出 github 博客    当然还不止这些，我还用到了风险管理与保险原理的一些方法。我向自己提问，风险有哪些？防控措施有哪些？</description>
    </item>
    
  </channel>
</rss>
