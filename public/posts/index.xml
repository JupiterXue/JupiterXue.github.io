<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 木夜星空的个人博客</title>
    <link>https://jupiterxue.github.io/posts/</link>
    <description>Recent content in Posts on 木夜星空的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>JupiterXue</copyright>
    <lastBuildDate>Thu, 02 Dec 2021 15:47:56 +0800</lastBuildDate><atom:link href="https://jupiterxue.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最后一个月了，还能再加把劲吗</title>
      <link>https://jupiterxue.github.io/posts/2021-12-02-november_replay/</link>
      <pubDate>Thu, 02 Dec 2021 15:47:56 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-12-02-november_replay/</guid>
      <description>又到了今年的最后一个月，既是激动人心的时候，也是紧张焦虑的岁月。公司里还想着冲冲业绩，考研人还想着最后考试的冲刺。他们都有各自的目标，彷徨又奋力地前行，都希望明年有个好的开始。是非成败进退难断，举步维艰不断亦难。生有去处，归途又在哪里？
借以此文复盘 11 月发生的一些点点滴滴，为 12 月做个计划，给今年划上个圆满句号吧。
11 月的时候主要做了两件事，一个是写作，一个是 Leetcode 刷题。
写作 加入小组真的是写作的源动力。月的时候，加入了一个千字写作小组。以日毕的形式存活到了最后结束。
 日毕：工作日完成指定的目标，比如写文章，或看书，或做题等。
 技术文 曹大，真的是我目前见过最厉害的工程师了。一门技术，能够做到有深度已经非常不容易。而要是对众多技术都或多或少有了解，能够对各种业务场景提出解决方案，这大概是顶级程序员了吧。
即兴写作 专门有个文档，用来存放平时生活中产生的灵感、无意间刷到的主题，我把这个文档称之为“即兴写作”。 因为主题众多，每次轮到写在我看来是“水文”的时候，就拿出来看一看。
最让我惊讶的是，在我看来写得很烂的一篇文章，我在发出去当时就想删除的文章，没想到有一点阅读量了，2w 人阅读了。
其中有几篇文章是和小伙伴们在进行互动，以文交流。
 在写作小组中，我们自发组合了同桌，我的同桌是位国内国籍，在北美结婚暂居的伙伴。她写了一篇关于自己英语学习的经历，总结了一些有用的建议。看了她的文章，和她交流发现她最近在学编程。那么正好，我就模仿她的写作风格来写了自己的编程学习经历。 最开始在公众号写作，我很不适应没有 markdown 来写文章。随后找了比如秀米，135。但这些模板在我看来花里胡哨，我只想追求简洁、简约，所以也放弃了。直到想起了之前用的 Typora，就捡起来用到写作当中。 Leetcode 小组成员希望我分享一下技术文的一些心得体会，我也认真准备了几千字的逐字稿和配图阔爱的 PPT，不负众望。  不足与反思  自己在文章中思考的还有很多不足。重要的还是概念能力，对现实的抽象，多抽象的描述，对概念的拆解等等。这些东西表现在文章中可能是更加生动的图画，绘声绘色的语言，引人入胜的故事。 很晚发文很严重。由于微信公众号每天只有一篇可以群发的机会，如果超过 12 点就会清零重置。而我大多数文章都是写在 23:30 之后的。如果出现些意外容错性真的非常差，好在还没有出现过。 对读者的理解不多。我写的文章其实没有说专门为了取悦读者，反而更多时候是在取悦我自己。尤其写完一篇几千字的文章，自豪感油然而生。 公众号推送不足。都说微信公众号是个封闭的空间，如果不去推流是不会有人看，不会有新人关注自己的。看到其他的小伙伴专门去诸如朋友圈、简书、小红书、知识星球发文，而我还停留在公众号中。  Leetcode 10 月的时候，召集了几个学过点编程的小伙伴，组建了一个 Leetcode 刷题小组。
也就在上周，参加了两场力扣周赛，还说想写个复盘，结果一直没来得及写，也借此机会进行复盘。
力扣周赛复盘 力扣的周赛是在每周都会举办的。基本上每周都是由不同公司选题出题目，定好时间进行举办的。一方面是关注在力扣刷题的技术人员，为公司招人做好准备。另一方面是在众多刷题挑战者中挖掘更有技术能力的工程师。
在报名阶段会让力扣的用户填写个人信息，以及有个选项说是否将自己的简历信息发给公司、自己是否有意愿到此公司工作。
以上都是些题外话，重点还是回到赛题当中。上周参加的两场比赛，一个是每周周赛，一个是双周周赛。 每个比赛都是 4 道题
小组与分享 Leetcode 小组中，有个同学看到我经常在公众号上发一些 Go 语言的技术问题，就想希望在新的一期小组中听到关于我的一些分享。所以在新的一期小组中，我专门花了一天的时间对 Go 语言的一些历史、特性、优势、劣势、应用场合以及目前就业情况做了些调研和梳理。:
不足与反思  心中无定。刚开始组织的两期小组，没有明确的学习路径，单纯刷题 不求甚解。刷题的时候遇到难题会有焦躁情绪，难受的感觉， 及时复盘。比赛完成只是松了口气，大有一身轻松，不再刷题的既视感。变懒了，也不再觉得复盘有多重要。休整两天后想起自己才做对了一半的题还是有点不甘心，而从自己的经历中最好的学习就是复盘了。  扳命计划 “扳命”是我们的一句四川话，意思是拼命地挣扎。也用来讽刺，说这个人在发神经。确实，在今年最后个月立目标，就是在作死。不过，在我看来，有计划总比没有计划要好，至少有开始的机会。作死如下：</description>
    </item>
    
    <item>
      <title>2021 11 30 Why_learning_coding_by_copy</title>
      <link>https://jupiterxue.github.io/posts/2021-11-30-why_learning_coding_by_copy/</link>
      <pubDate>Tue, 30 Nov 2021 00:16:11 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-30-why_learning_coding_by_copy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go 语言优势与行业前景</title>
      <link>https://jupiterxue.github.io/posts/2021-11-27-go_advantage_and_employ_prospect/</link>
      <pubDate>Sat, 27 Nov 2021 21:37:16 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-27-go_advantage_and_employ_prospect/</guid>
      <description>在我开始从事 Golang 工作的时候，并没有去了解过 Golang 的前景是如何的。可能是自己的直觉，也可能是对这门编程语言有着迷之信仰，又或者当前 Golang 工程师的薪资待遇稍微高点，就莫名开始从事这么语言的程序开发工作。今天有个机会在小组做分享，也可以将之前落下的功课都补回来，同时我自己也好奇，这门语言的技术生态。
下面我就以六个主题来介绍这门语言，分别是：
 前生今世 多方优势 自身优势 应用场景 市场行情 从业建议  大家在学编程的路上有没有想过一件事，我们学习编程语言的目的是什么？解决问题。解决项目问题，解决公司问题，解决顾客问题，解决社会问题，最重要的是解决我们自己的生活温饱问题或者说学业就业问题吧。
现在各大互联网公司都在极力储备 Golang 的人才，主要还是微服务 docker 的成功，它成为了 Go 语言的第一个 killer 杀手级应用，很多公司都会使用 docker 来部署他们的系统，也会用 Go 来开发许多新的系统。包括谷歌脸书 BAT、美团滴滴七牛云、京东小米360 等也都在招聘 Golang 工程师。
前生今世 当我们选择了一门编程语言，很可能意味着选择了一段历史、一个技术生态。
早在 2007 年，有三位 Google 的大佬程序员在进行一个有趣的讨论，就是下面三位看起来《平凡》的人。
那时候谷歌公司的产品和应用多是用 C++ 来写的，复杂性巨大，了解过 C++ 的同学也知道，相比于现在流行的 Java、Python，非常复杂。并且它们公司那样巨无霸的产品用 C++ 来编译构建速度非常慢，对一些服务端程序的并发支持也不友好。
然后他们三个好基友拍一拍头，握握手，就设计出了 Go 语言，并且第二年也是 Unix 之父的 Ken Thompson （第三位白胡子老爷爷）实现了第一版 Go 编译器，用来验证之前的设计。直到 2009年 11 月 30 日，Go 语言开源了。
Go 语言一经发布后就吸引了一些公司，尤其是云计算领域的初创公司成为了 Go 语言的早期接纳者和布道者。一些公司中还诞生了像 Docker、Kubernetes 这样的“杀手级”或示范性项目，这些项目也让 Go 语言真正地被称誉为“云计算语言”。</description>
    </item>
    
    <item>
      <title>程序员的终极法宝？</title>
      <link>https://jupiterxue.github.io/posts/2021-11-25-outstanding_tech_or_concept/</link>
      <pubDate>Thu, 25 Nov 2021 15:39:05 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-25-outstanding_tech_or_concept/</guid>
      <description>也有人说，会搜索就能击败 90% 的人。但是
不可否认，大千世界无奇不有，突飞猛进的方法也许真的存在。 但问题是，你也需要花时间去学习，去尝试、去实践啊。查理·芒格说过，我的剑留给能够挥舞他的人。他有着 100 多个思维模型，又有谁能够全部掌握，又有多少人能够真正理解其中的道理。更可怕的是，有时我们迫切希望现在糟糕的处境能有改观，羡慕别人拥有的自己也能很快获得，所以一些付费课、营销局、诈骗信的妖魔鬼怪都无孔不入。屠龙宝刀无人拿起，屠龙者最终成了恶龙。最终我们是花了钱去学习那些“标题”，最终一无所获。
你想获得的突飞猛进的概念或技术，本质上还是逃不开你人性中想要一夜暴富急功近利的心理。 有些东西真的不是靠一时之间就能改变，它叫做时间的壁垒。
凭什么你花了好几年时间，看了好十几本关于编程的书，练习了几百上千道 Leetcode 的题，而有人十天半个月突击就说他掌握了某些知识或者框架，就能超过你的理论基础、超过你的编码能力？
凭什么你耐心耐心耐心和别人沟通磨合项目，被产品、领导挨骂挨骂挨骂，终于懂得了一点如何去做好一个产品，如何去。
凭什么
这些都是时间的壁垒，一般人无法超过，真的。如果能很快超过你，说明人家本来就和你不在一条赛道的，别人自小聪明，家境优越，师从名师，师出高校。自大小就开始学习编程，参加算法竞赛。别人很快超过你都是有原因的，也正因如此，别人和你的竞争不在单一的努力方向，而是家族、资产、社会地位等等。
所以，年轻人讲点武德，不要好高骛远，不要想着一夜暴富，踏踏实实地做好自己该做的事，上课认真听课，工作认真完成，学习不偷工减料，做事不拖泥带水，你的每次认真付出，就是你最大的法宝。
最后也引用来自 encro 的一句话作为本文的结尾
 既然你允许存在“突飞猛进”，那么也不要怀疑会存在“突然消失”。
 </description>
    </item>
    
    <item>
      <title>如何训练逻辑思维？</title>
      <link>https://jupiterxue.github.io/posts/2021-11-23-how_to_training_logic/</link>
      <pubDate>Tue, 23 Nov 2021 22:59:35 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-23-how_to_training_logic/</guid>
      <description>我们总会羡慕那些心思缜密、妙语连珠、出口成章的人，也会在惊讶之后转瞬欣赏那些金句频频、有理有据、一针见血的人。这些人我们在诸如辩论赛场上、突发事件报道记者身上、外交官回复上都或多或少有见到。他们的这些能力，我们习惯性地归纳为逻辑思维。并且我们对生活中许多能够提高逻辑思维的东西趋之若鹜。可惜的是，费时费钱，还是没能将逻辑思维提高到理想中的高度。今天，就来揭开到底什么是“逻辑思维”、怎样训练提高逻辑思维的神秘面纱。
在谈逻辑思维之前，需要先请出它的另外一位朋友“形象思维”，也叫做艺术思维。其实也就是我们平时在生活中眼睛看到的、耳朵听到的、鼻子闻到的、嘴里尝到的以及身体接触感受到的，我们能够对这些“感受”进行理解、描述、表达和记录。因为这些都是实实在在的东西，通过我们的五官能够去体会到。
而逻辑思维不是这样的，逻辑思维也叫做抽象思维。是借助不存在与现实世界中的东西，来帮助我们更好理解、便于记忆、做出结论的思维运动。即我们人在认识事物过程中，借助了概念、判断、推理等思维形式，去将现实抽象为概念、揭示除了事物与现象背后的本质，进而能够认识世界并改造世界。
这么说有点抽象了，再来说说逻辑思维中常用的方法，就能很好理解了，这些方法其实我们从小学就已经开始掌握，只是我今天再把它们都拎了出来。
  分析与综合。分析是在思维中把对象分解为各个部分或因素，分别加以考察的逻辑方法。综合是在思维中把对象的各个部分或因素结合成为一个统一体加以考察的逻辑方法。
  分类与比较。根据事物的共同性与差异性就可以把事物分类，具有相同属性的事物归入一类。具有不同属性的事物归入不同的类。比较就是比较两个或两类事物的共同点和差异点。通过比较就能更好地认识事物的本质。分类是比较的后继过程，重要的是分类标准的选择，选择的好还可导致重要规律的发现。
  归纳与演绎。归纳是从个别性的前提推出一般性的结论，前提与结论之间的联系是或然性的。演绎是从一般性的前提推出个别性的结论，前提与结论之间的联系是必然性的。
  抽象与概括。抽象就是运用思维的力量，从对象中抽取它本质的属性，抛开其他非本质的东西。概括是在思维中从单独对象的属性推广到这一类事物的全体的思维方法。抽象与概括和分析与综合一样，也是相互联系不可分割的。
  最后再来说说，怎样训练逻辑思维？其实方法很简单——写作，认真对待你写的每样东西。如果你写不清楚，那就是代表你没想清楚。
这么说明白了吗？还是不太明白，那么以上我所说的都是白说的，因为前面我的这句话也在引导你进行思考，也是希望你能够组织语言去表达，怎样训练逻辑思维。要想训练逻辑思维，需要的是多去细致地观察生活，借助以上四种逻辑思维方法去用文字记录，最后刻意提炼出对你有帮助、有价值的信息。
通过写作能够锻炼思考，但不一定能提高逻辑性。而不写作的话，在平时是很难说去刻意去提高自己的逻辑思维能力的，毕竟，很多时候我们只想把作业早点完成，把工作早点做完。所以，写吧！</description>
    </item>
    
    <item>
      <title>沉浸式写作体验——Typora 插图</title>
      <link>https://jupiterxue.github.io/posts/2021-11-18_typora_illustration/</link>
      <pubDate>Thu, 18 Nov 2021 10:16:09 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-18_typora_illustration/</guid>
      <description>最近一位也在写公众号的小伙伴问到公众号有没有什么便捷的方式插入图片，以及是更好的沉浸式写作体验，边输入边搞定排版。这个问题其实之前也有两个小伙伴问过我，我也只是丢给她们怎样使用的链接就“放心”了。没想到后来还会有其他小伙伴也可能用到，既然这个分享的动作也是重复的，那么我就来优化一下，动手写一篇手把手的教学。
虽然本文只是在说如何配置和使用 Markdown 编辑器 Typora，但经过下面略微复杂的操作后，可以做到一劳永逸。刚开始的时候有点麻烦，后来每次在 Typora 中写完文章后就能全选然后 Ctrl C 和 Ctrl V 复制粘贴到公众号，填上标题作者、选上配图打开原创，几秒就能发文章了。
Typora 的安装与使用 安装 首先来介绍一下 Typora，打开官网，可以看到非常简洁的界面，找到右上角的下载，根据你的电脑系统平台选择相应的安装包。
使用 安装好之后，打开 Typora 可以看到一个非常清爽、没有任何干扰的写作界面。
什么是 Markdown，图中也给出了一定的解释。其实 Markdown 也是专门给程序员而设计的语法，通过类似代码的方式来实现文字、排版的不同样式。并且 Typora 采用所见即所得(what you can see is what you can get) 的方式，写入的 Markdown 语法会被直接解析成相应的格式。如果你想看源代码，使用快捷键 Ctrl /，同样的，再次按下 Ctrl /，就能回到原样了。
公众号插图的解决方案 公众号可以直接插图片有三种方式，一中是 QQ 或微信截图，一种是网络图（本地如果上传到了云端就可以直接粘贴过去），还有一种是本地拖入图。它们分别有以下的局限：
  截图能够直接粘贴，但图片大小和位置不能做改动（我是没找到）
  本地拖入的方式虽然还勉强方便，但同样不能修改大小和位置。
  而网络上的图或者从本地上传到微信的图，大小固定，更是不能修改大小。
  有些图我们想修改大小、加上边框、直接粘贴，有没有什么好的办法呢？有的——Typora+Github + PicGo + jsDelivr。通过 PicGo 创建稳定图床 URL 链接，存放在免费的云端仓库 Github，再通过 jsDelivr 来加速访问 Github，最终在 Typora 实现每插入一张图就自动上传到云端、生成可直接复制粘贴的云端图。</description>
    </item>
    
    <item>
      <title>编程、输入法和打字速度</title>
      <link>https://jupiterxue.github.io/posts/2021-11-16-programming_typewriting_and_speed/</link>
      <pubDate>Tue, 16 Nov 2021 10:52:05 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-16-programming_typewriting_and_speed/</guid>
      <description>学习编程是否需要好的输入法？是否需要很快的打字速度？编程萌新可能会遇到这两个问题。你可能更更想问学编程是否需要英语？是否需要数学？别问，问就是需要 :）
我们想做一些事的时候，总会担心自己基础不够，那个差、那个也差，这个应该补一补，那个也应该补一补，并且我们非常希望这件事能够在短时间内完成。这意味着什么？意味着我们想通过自己扎实的基础去快速学习、快速完成一件事，如果完不成就会自然而然地放弃，而不是惩罚自己。这是人性，这是人天生自有的速成倾向。
因此我们需要衡量一下，学编程需要多少时间，学输入法需要多少时间，学快速打字需要多少时间？这里隐含的其实是机会成本。什么是机会成本呢？机会成本衡量的是在两种或多种物品直接的利益取舍，为了简化起见，一般是在两个物品直接衡量机会成本。一般我们衡量机会成本不是算立刻拿出的时间或费用，而是根据相对严密的数学运算，进行心理预估，进行抉择时，失去一种物品的收益而接受另一种物品的收益。
我们无法在同一时间内既学习编程又学会高效的输入法，还把打字速度也练得很快。因此我们会进行权衡取舍，哪个的学习成本低、学习收益高，哪个学习成本高、学习收益低。虽然我们都是理性人，会去考虑边际量，比如学会了编程，能够去参加工作、能够做一些工具，能够做有效益的事，并且编程越厉害，越是有更多高薪工作，能做出高效工具。但是，我们也会因为编程有点困难，一时之间无法突破障碍、陷入僵局，不做这主要的 A 事情，而去做 BCDEF事情。结果呢，A 多半没做好，BCDFE 可能做到了，但对 A 没有任何帮助。
在我大学最早接触编程的时候，还是用 C 语言来写 Hello World。因为不熟悉键盘布局，还是尖起两个食指去找字母和符号，比如# {} //。那时我从来没想过会是因为输入法、打字速度影响我学编程。我只知道，如果编程需要用到这些字母符号那么我就会去找它们，如果有自己熟悉的但是很重复的，就会用到 Ctrl+C 和 Ctrl+V 。后来，我在学习编程的时候，一边听老师上课，一边跟着老师敲代码，真的就不知不觉会去按那些原来看起来很陌生的字母，打字速度就是在编程的练习中提高的。
后来的后来，我想精进自己领域的技术，还是得去看一些书，做一些笔记。我尝试去抄书来深度学习，但即便是用键盘打字，没有手写还是很费力。因为我还是用的拼音输入法，错字率不仅略高有时输入一个拼音需要翻一两页找，而且有时还会切换英文去输入字母。切换翻页切换翻页，这么下来效率很低。于是我去找了找有什么输入更高效的输入法。还真找到了，网上说的是拼音输入法的输入效率最低，然后排名分配是 双拼 &amp;lt; 五笔 &amp;lt;= 二笔。听说有时五笔最高效，我经过几天尝试还是没能掌握，二笔也是因为没有找到个合适的学习材料终止。但现在想起来，输入法还真没有成为我在编程上的障碍，只是我想再跳一跳摘到更高的桃子时的一个垫脚石。既然我没有掌握它，到不如把现在的输入法多加联系，把拼音输入法的石头多垫几层，多用点时间而已。
原来真相是这样：当我做好编程这件事的时候，其他的事情也会跟着好起来，输入法越用越灵活，从两个手指敲键盘到盲打。关键还是从做好一件事开始。
最后，类比英语和数学的基础在编程中的需求情况，现在你是否知道自己需不需要它了？想学编程还是不用关注英语是否扎实，数学思维是否够灵活。重要的还是投入时间去看编程的基础概念，去动手编码验证结果，脱离教材去尝试面对白板去写代码。</description>
    </item>
    
    <item>
      <title>我的编程之路——关于Python 学习的回忆</title>
      <link>https://jupiterxue.github.io/posts/2021-11-11-my_programming_road/</link>
      <pubDate>Tue, 09 Nov 2021 10:16:37 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-11-my_programming_road/</guid>
      <description>本来今天想写点关于“编程、打字速度、刷入法”的一个讨论，因为一个朋友建议，希望我能写写关于编程的学习经历。不如就在今天吧。谈一谈我是如何学习 Python的。
要说我现在写 Python 的水平，可能还只是停留在使用框架和包上，距离真正的 Python 大神还差一段距离。不过像爬虫 Scrapy、requests，后端 FastAPI，数据分析 Pandas、Numpy，还是能够信手拈来。从 Python3.4 到 Python3.8 每个版本更新有怎样的迭代都有个了解，一些魔术方法、奇淫技巧用得较少偶尔能够抖个机灵。因此我现在大多数时间还是在用 Python 做一些 CRUD 增删改查的工作、衔接多种数据库做数据处理以及其他大数据组件的调用插件。至于 Python 算法的能力，那又是另一个无关编程语言，而是算法与数据结构的能力了，到目前为止仅刷过了 283 道题，还需继续努力。
所以我所说的可能对你没有什么帮助，如果你感兴趣，可以接着往下看。
初次接触编程—还是那个 C 语言 在大学以前我其实还不知道有编程这回事。直到上了第一门编程课，遇见了那本到今天也想骂又念念不忘的红皮书《C 程序设计-谭浩强著》。
当时学编程的最直接感受就是当时老师说的一句话：暂时不用管这个 #include 、main 是什么意思，我们 C 程序都需要这样的格式才能够执行代码。
1#include &amp;lt;stdio.h&amp;gt;2 3main() { 4 printf(&amp;#34;hello world\n&amp;#34;) 5} 不求甚解，大概是当时止步于编程大门前一个绊脚石。
结识好伙伴 Java 大二的时候，我有个室友，从大一开始就和我是同一专业、同一个班，后来我和他一起转专业，从物联网转到软件工程，我们俩也神奇地分到同一班、同一个寝室。我们都对实验室感兴趣，于是去找到了当时做 Web 方向的实验室。室友他其实从高中就开始学习编程，自己在没有任何外力的情况下啃了一大部分《Java 编程思想》，因此在大学期间已经具备了 Java 编程的基础，不仅在 C 语言中考得高分，在实验室中也收到了指导老师的看重。
某一天，因为实验室有众多不同领域的老师，开始分方向进行小组学习。一个是有大好前景的 Java Web，一个是 Python 视觉处理。室友虽然一直在向我传达选什么方向都可以，但还是透露出他希望我选择 Java 方向，因为实验室主导老师擅长这个，室友他也熟悉。也正是因为于此，我不甘一直在他的带领下，我希望能够和他，站在一起。所以还是选择了些许陌生、迷茫的 Python。（即便当时大一下的暑假我自己看完了大部分《Java 从入门到精通》，还是坚定地做出了选择）后来，我们俩回顾当初这段经历，依然觉得我可能选错了，但我，还是不后悔。也不得不说，当时通过对比学习了两门编程语言基础语法，也为我快速学习 Python 奠定了良好基础。基础语法如隔层纱，只要花时间去阅读、去尝试就能了解与理解。
结识新朋友 Python 其实当时也抱着很高的热情想学 Python，第一本看的 Python 书便是《Python 编程入门》。得益于有点 C 和 JAVA 基础，这本书我拿到的第一周就把基础都看完了，只有三个实践项目因为都不是很感兴趣就没看下去了：一个是打飞机游戏、一个是 Django 后台，还有一个是 GUI 可视化。后来也有没有接触过 Python 的同学，希望我能推荐一本入门的书，我也毫不犹豫地推荐了它。对了，现在这本书已经有第二版了，相信也不会差。</description>
    </item>
    
    <item>
      <title>为什么公司更多用 CentOS 而不是 Ubuntu</title>
      <link>https://jupiterxue.github.io/posts/2021-11-09-why_more_centos_rather_than_ubuntu/</link>
      <pubDate>Tue, 09 Nov 2021 10:08:30 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-09-why_more_centos_rather_than_ubuntu/</guid>
      <description>想做个类似鹤老师经济学一样的专栏，利用到经济学的工具，对自己的领域进行一些思辨。
有的人说：这就跟许多国内互联网公司喜欢用 go 一样，说不出什么道理的。 有的人说：本质上是谁有钱，谁更稳。CentOS 的背后是 Redhat 。 还有人说：历史习惯问题，由于某些原因，centos 在中国流行，高校用、企业用，用的人多了一传十十传百，长年累月下来用户体量保持一定优势。
摘自网友 namelosw 的一个梗：
 服务器：要说还是 CentOS 牛皮，Ubuntu 就图一乐 编程语言（以前）：要说还是 C++ 牛皮，Java 就图一乐 编程语言（现在）：要说还是 Java 牛皮，Go 就图一乐 建模：要说建模还是 AutoDesk 牛皮，Blender 就图一乐 引擎：（不太久前）要说引擎还是 UE 牛皮，Unity 就图一乐 引擎：（估计不久以后）要说引擎还是 Unity 牛皮，Godot 就图一乐 桌面（ 03 年）：要说还是 Win 98 牛皮，2000 XP 的什么叼玩意 桌面（ 10 年）：要说还是 XP 牛皮，Win 7 什么叼玩意 桌面（ 16 年）：要说还是 Win 7 牛皮，Win 10 什么叼玩意
 </description>
    </item>
    
    <item>
      <title>学点马克思主义哲学</title>
      <link>https://jupiterxue.github.io/posts/2021-11-05-learn_some_marxist_theory/</link>
      <pubDate>Fri, 05 Nov 2021 15:12:11 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-05-learn_some_marxist_theory/</guid>
      <description>前段时间组织了几个学过一点编程的小伙伴一起刷 Leetcode，在小组结营直播中，我向大家传递了陈云的思想“不唯上、不唯书、只唯实，交换、比较、反复”，并以此作为我们小组的核心思想。可能部分小伙伴会感到疑惑，一个刷题的小组还整些什么思想，老老实实刷题就好。老老实实行动是没有错，可问题就在于准备不充分、容易受挫、坚持不下去，几天下来就放弃了。
刷 Leetcode 题就像做数学题，会做就是会做，不会做就是不会，答案一看都懂，自己一做都错。同样的，在刷题的过程中也是，一学就废，一做就飘红。究其原因，还是思想方法不对。那么什么思想方法是对的，什么思想适用于刷题？陈云归纳的这几句话很适用。
在延安时期，他和毛大大有几次密切的谈话。因为大家都年轻，陈云当时认为，自己犯错误的原因在于缺少经验，而毛大大却说，犯错误的主要原因不是缺少经验，而是思想方法不对头。这样类似的话向他强调了三次，并建议他去学习点哲学。后来陈云果真开始认真研读马克思主义理论，尤其是马克思主义哲学；为进一步提高学习效果，他也成立了一个学习小组，并亲自担任组长。最初，这个小组只有十几个成员、30 多位干部旁听；后来，这个小组持续学习了四年多，也就是 3 阶持续行动，并被中共中央评为模范学习小组。
延安的学习活动给了陈云源源不断的好处，最大的收获就是掌握了维护辩证法的思想，他经过提炼和总结归纳出了 15 个字的核心思想：不唯上、不唯书、只唯实，交换、比较、反复。实事求是，是马克思主义的根本观点，是人认识世界、改造世界的基本要求，也是工作方法和领导方法。交换意见、集体讨论是达到全面认识的重要方法。通过比较能够弄清事物的本质。反复才能真正做好一件事。
虽然一般的刷题小组都强调务实，但善于务虚的刷题小组，很大可能性能够稳定进步，持续行动，刻意学习，原因就在于掌握了类似这样的正确思想方法。在我的小组中也是采取这种模式。
只唯实。个人成长的核心是持续行动与刻意学习，如果能够找到相同志趣的伙伴、感兴趣的领域、能够结合自身专业的技能，将这些结合在一起无疑是对自己帮助最大的、最有价值的。而如果没有这样的小组怎么办？那就自己来做吧。
交换。我和小组的一位同学交流过，发现她原来也有开小组的想法。第一个是因为这位同学探索出了专题学习的方法，也推动了小组自我评价的节奏。其次是因为我最近开始更文了，可能时间分配不够在管理上。所以就让她接替我继续运作小组。
**比较。**我对学习材料的选择也不是非常有把握，但有个比较清晰的思路。
1、找资料先想到平台，刷题在哪些平台很流行呢？
2、其次看评论，这里要注意的是保持平常心。就像买东西一样。会有好的评价也有不好的评价。关于好的看是否有自己很需要的，关于不好的亲自去看材料、去简单操作一下再来客观评价。
3、最后认真去学习材料，有看不懂的地方很正常，再去看其他解释直到学懂，就能拼凑出 “属于自己最好的学习材料”了。
**不唯上、不唯书。**小组采取短期运营，持续刷题的理念。每期小组存续期不超过一个月，也就开展到了第三期。刷题期间我们用了不一样的学习材料，通过对比知道了哪个材料的哪些部分更好。更重要的是，我们不能完全按照别人的攻略前进，所以也会偶尔回顾自己刷题的情况，再调整刷题的进度。
反复。我们小组采取了代码截图打卡和 自我评价 QA 的模式回答问题。这个过程大家能看到你的思路与困难，并且给予评价与帮助。每日打卡任务，我们采取作业分级制度。分为必做题和选做题。一般必做题都是一道 leetcode 题，选做题可能是一个或两个，包括：制定计划/专题练习题目/刻意学习学习材料/复盘预准备/辅助工具尝试使用等等。
总之，掌握了马克思主义的思想理论，让我们在刷题中不再感到些许迷茫，差的只是时间的积累和耐心的等待。
最后，如果你也位技术人，不妨学点马克思主义哲学，不会错的，指不定哪天当你拔剑四顾心茫然之时，想起这些实干家的思想，也能拨开迷雾见青天。
参考资料
[1] 何云峰：陈云——善于务虚的实干家，党的文献
https://mp.weixin.qq.com/s/q3in_4xWLoEqC91-FY1Tig
[2] 彭庆鸿、吴晓荣：陈云关于经济建设的几个思想和工作方法, 党的文献
https://mp.weixin.qq.com/s/BOE9Byofo72yPfl-MhFRpQ
[3] 缅怀陈云：新中国“掌柜” 一生清正廉洁（组图）,中国共产党新闻网
http://dangshi.people.com.cn/n/2015/0612/c85037-27145890-7.html</description>
    </item>
    
    <item>
      <title>像经济学家一样思考——烧焦的烤肉能不能吃？</title>
      <link>https://jupiterxue.github.io/posts/2021-11-03-why_cant_eat_burned_meat/</link>
      <pubDate>Wed, 03 Nov 2021 07:23:56 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-03-why_cant_eat_burned_meat/</guid>
      <description>前段时间读了一点点经济学的教材，其中一个话题很有意思“像经济学一样思考”。可问题是作为普通人我为什么要像经济学一样呢？读完我略有明白，因为经济学存在于生活的方方面面，大到国家政府，小到家庭开支与情感关系，都可以用经济学的思维去理解。
在此期间我没有搞懂一组概念 “内生变量和外生变量”，也不是能够说清楚“归纳法与演绎法”的本质与区别。又回去看了些视频才豁然开朗。借此机会认真分析了一个常见的问题“烧焦的肉能不能吃？”，最后来揭晓答案。
经济学是什么 曼昆认为经济学是研究社会如何管理稀缺资源，同时也是研究商品和服务在生产、分配以及消费时的社会科学。其实经济学也是门科学哲学，因为涉及到科学的理论，从观察到理论再回到现实去验证理论。它也有两个基本的准则：针对理论研究要讲逻辑，针对经验研究要讲证据。
所以《经济学原理》主要针对的是经济学理论，而《计量经济学》主要针对经济学经验的研究。这便是经济学的两条腿走路，既需要一些理论上的定理、推导、证明，也需要数据上去验证这些既定的理论是否符合现实。
在理论方面，比较常见的方法是构造假设，通过假设构造简化的经济学模型，才能去模拟现实，去预测问题的结论。
在研究现实问题时，选用正确的经济模型对于理解经济变量之间的因果关系至关重要。所以关键的是，当看到了一个现象之后它背后隐含的经济模型是什么。
当我们看到中国经济增长，收入差距在扩大的时候，背后的理论是什么？是收入差距带来了经济增长吗？还是经济增长带来了收入差距增大？数据，往往不能直接告诉我们因果关系，而需要人们去想办法，或构造一个理论模型，能够解释经济增长就能带来收入差距。或用更加严格的数据方法来区分因果关系与相关关系，进而得出二者的关系结论。
生活中常见的谬误 现实当中我们经常把因果关系和相关关系混淆，第一个原因是因为常常存在被忽略的变量。举两个例子：
 癌症是由打火机引起的吗？ 疾病是由肥胖引起的吗？  第一个例子中，研究者收集了大量、成千上万的数据来做统计分析，最终得出一个结论是：癌症是由打火机引起的。所以研究者就呼吁用打火机有害健康。这合理吗？显然这里犯了很简单的错误，因为忽视了吸烟，忽略了这第三个变量。目前我们主流的共识都是，吸烟引起了癌症、吸烟引起了家里有打火机，这才是更合理的解释。
而第二个例子疾病与肥胖的关系更为复杂了。既可能是疾病导致了肥胖，也可能是肥胖导致了疾病，还有可能是基因导致了疾病、缺乏运动导致了肥胖。
这里引出了，混淆关系的第二大原因——因果关系可能互换，也就是存在双向因果关系，尤其是错误地选择经济模型可能导致反向因果关系的错误。当我们看到一个 X 与 Y 正相关或负相关的关系时就要警惕了，究竟是 X 影响 Y 还是 Y 影响 X 呢？更加需要我们用逻辑去分析。还是举两个例子：
 警察数量的增加引起了暴力犯罪的上升吗？ 献血有利于人体健康吗？  很明显上面的结论是错误的，暴力犯罪上升才是引起警察数量增加的原因，人的身体健康了才更有利于献血。
所以当我们遇见一个结论的时候，第一反应不是看它说了什么，而是搞清楚里面有哪些关系，尤其重要的是搞清楚哪些是因果关系，哪些是相关关系。如果是因果关系的话，原因是什么，结果是什么，不要搞反了；如果是相关关系的话，第三变量是什么，还有没有其他因素导致了现在的结果。
回到最开始的问题“烧焦的肉到底能不能吃？”这里其实隐含着，吃下烧焦的肉是否有危害，更常见的一个生活传谣是“烧焦的肉会致癌吗？”。这个问题是不是呼应了以上的推理？没错，我们首先可以发现其中有两个变量，肉烧焦的程度和致癌可能性，并且可以明显知道致癌可能性不会导致肉烧得更焦，所以我们需要关注的是，是否有第三个变量更能够解释这两者的变化。
时间。肉烧焦需要一定时间，致癌需要一定时间累积。如果长时间食用烤焦的肉，那么很可能会致癌。而短期内食用少量烤得不太焦的肉，是没有太大致癌的可能性的。
这时化学家们又坐不住了，只要是肉烤焦了就会产生 XXX、YYY，那些都是致癌物。算了吧，要是吃一点就致癌了，我们茹毛饮血好不容易生起火的先辈们，在就在美味的烤肉中“灭绝”了。你看这个靠的金黄酥脆的五花肉，是不是很馋？没错，你的胃告诉我，你需要它。</description>
    </item>
    
    <item>
      <title>放弃是正常的，不放弃才是奇怪的</title>
      <link>https://jupiterxue.github.io/posts/2021-11-01-five_up_is_normal/</link>
      <pubDate>Mon, 01 Nov 2021 23:04:34 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-01-five_up_is_normal/</guid>
      <description>今天在知乎看到一个话题《到底应该如何培养一个优秀的小孩》，其中一个回答是，关于兴趣爱好的培养。某答主的回答是：“非常简单，就是让小孩多去尝试。放弃是正常的，不放弃才是奇怪的。他很擅长了，但没有父母的要求或鼓励，他还是会经常做这件事。一般，这个就是大脑自然分布上的优点，就可以培养了。”看到这个回答我也很拍手称快。但反过来，试问我们成年人如何培养一个兴趣爱好。或许，更恰当的是，成年人如何找到自己长期想做的事？
小孩子可以经过无数次地尝试，直到找到自己感兴趣的事情，乐在其中。而成年人也有无数的无奈，直到看见别人做到了自己想做的事情，而自己没做到，低头叹息。但我想说，不必自己限制自己。小孩可以随意放弃一件事，成年人也可以放弃一些事。毕竟，放弃是常态。
昨天参加了一个活动面试，本来提前和负责人联系好、高高兴兴地准备了自我介绍，提前 10 多分钟到场。没想到轮到我的时间参加面试时，活动负责人拉我进了群，说了一句不是我，就又把我踢出去了，后来也没有什么解释。又什么都没做等了 10 多分钟，才有消息说轮到我了。
本来看上去是一件小事，因为活动繁忙将顺序弄错了，导致时间错乱、人员安排出错。但这个模式没想到就触发了我过去的经历所带来的创伤。从被踢出去开始，我就开始胡思乱想，为什么时间会差这么大，为什么没有人通知这种情况，为什么我会受到这种待遇。质疑、愤怒迅速冲上大脑，这股情绪一直延续到了晚上才得到好转。
后来在我冷静下来后，向负责人说，我想放弃这次活动，并说明了我的情况，她们也立刻前来道歉，并安慰和鼓励我，要走出过去的经历，不要让情绪和遭遇影响现在和未来一段时间。我也再次再次冷静下来，思考了这个问题。因为我当时就没有特别好的办法解决，也只是让时间过去慢慢好起来。而现在又触发了这种场景，第一反应也只是强烈的情绪。
关于情绪，还是需要自己给自己疏导。也许就像负责人说的，放弃这次活动并不能解决问题，但每个人都有每个人的生存法则，以支撑他们顺利渡过难关。客观评价了我自己还需要一定时间恢复，所以就放弃了这次活动。
不过，东方不亮西方亮。没有参与这个活动，还可以参加其他的活动，此处不留爷自有留爷处。我其实已经开展了两期刷 Leetcode 的小组，带领几个做技术的小伙伴，每天会保持一两道题的量，目前已经经过了一个多月，差不多刷了近 百道题。也逐渐开始想通最开始的问题。
成年人的崩溃可能是无声无息的，但总有能够克服的事情，自己愿意去做。也许为了生活，也许为了失去的梦想，也许还是不甘。成年人做成一件事其实也很简单，只要持续去做。
无论学习也好，健身也好，早睡保持健康饮食也好，这些都是逆人性的。在别人看来，你就是变态，可是你做到了，别人没做到，你持续去做，你就能把这件事做好。以变态作为常态，新常态替换旧常态。
这便是在我看来，成年人最后的倔强吧。</description>
    </item>
    
    <item>
      <title>2021 10 25 Escape From Escape Analysis</title>
      <link>https://jupiterxue.github.io/posts/2021-10-25-escape-from-escape-analysis/</link>
      <pubDate>Mon, 25 Oct 2021 23:20:11 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-10-25-escape-from-escape-analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Leetcode 刷题初探</title>
      <link>https://jupiterxue.github.io/posts/2021-10-13-leetcode-thinking/</link>
      <pubDate>Wed, 13 Oct 2021 23:04:46 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-10-13-leetcode-thinking/</guid>
      <description>题外话 已经有刚好一个月的时间没有写文章了，其实每天都会想着要写些什么，包括 Go 高级技术、《DDIA》的阅读进展，以及一些零散的即兴写作。其实之前写文章有接近日毕的好习惯，这真的是沿袭成长会的优良传统。虽然文章不一定写得好，但只要持续每天写，总有时间去做得更高，而不是一直在等自己状态好，一些补完所有学习/写文章等想法。
还有一点是我参与了成长会的写作日毕小组，借此机（ya）会（li）能够尽可能达到每天写文章的状态。而上个月的今天，也就是小组结束的时候，我也没有让自认为建立起的日毕习惯带动我继续写文章。还是得承认，我是个懒人。
但我也没有闲下来，这一个月的时间，刷了一些 Leetcode 题，一些思考和感悟和大家分享一下，包括为什么想刷题，如何刷题，学习材料，刷题的收获、小组氛围和自己的一些见解等。
开启刷题之路 为什么想刷题 其实很直白的就是为了大厂的面试。每个小程序员心中都有个纯粹地去大厂的梦。但发自内心还是想把算法能力提高，增加对编程语言的理解。然而在今年成长会中，暂时还没有适合自己的技术类小组，既然没有就自己做吧。我也是第一次尝试建立小组，想调动做技术类同学的一个学习氛围。
如何刷题 其实我是调研了许多 github 项目、知乎、简书上的攻略，然后总结了如下一个要点：
（1）短期大量训练。虽然小组是短跑，但想要提高必然要大量练习，不如在这个小组的压力下多 push 一下自己。一天中有时间就去刷一道题。
（2）刷题顺序。由于长期没有刷题的习惯，对算法生疏，对平台的机制不熟悉。先找简单题摸索，多通过些题，既培养刷题感觉、自信，也慢慢培养刷题的好习惯。刷通一遍简单提后，刷中等题。（据了解，大厂出题难度也就中等）
（3）刷题习惯，做难事必有所得。首先脱离一切，去看问题，写代码尝试，直到想不清楚逻辑、彻底忘记了某数据结构，然后先复习数据结构再刷题。还是没通过，找答案通过，然后手抄一遍并标记下来。
（4）学习习惯。每天精读一篇《刷题攻略》/ 刷一集刷题视频 / 一篇公众号博文 / 关注博主随便看看。
学习材料 已经开展了两期刷题小组，学习资料都是源自 github 中 star 很多的项目。
第一期我们用到的是 《LeetCode 刷题攻略》https://github.com/youngyangyang04/leetcode-master ，第一期简单刷了大部分后发现，这个材料还是零零散散。
所以第二期换了学习材料，用的是 《LeetCode Solutions》https://github.com/azl397985856/leetcode ，让我有点意外的是以下几点：
（1）相比上期材料，题目罗列更清晰，更有条理，也更好用来出题。
（2）没想到刷题还有浏览器插件，调研和试用了两个不错的：
 - **Leetcode Editor**，作为 JetBrains 全家桶中的编辑器能够按照插件，可以直接选择题目，并打开题目模板，不用自己再复制。（强烈推荐）   - **leetcode cheatsheet**，作者给出的插件，提供了一些解题的模板，可惜只有 js 和 py 版本。（一些树、图、动态规划等题目可以先用起来）  （3）一直想了解一下 Anki，都没一个感兴趣的主题，没想到 Leetcode 也有，而且意外发现非常适合。
刷题收获 （1）刷题量，两道简单一道中等还行，但多一道中等就有点难受了。
（2）粗略复习了八种数据结构（数组、链表、哈希表、字符串、栈与队列、树、回溯、排序）和两种编程语言的常用基础语法（Python 和 Go 都用到了）。总结了：链表、哈希表、回溯、树类型题目中的关键步骤。
（3）尝试用不同编程语言实现算法，增加了对算法思想的印象、加深了对编程语言的熟悉度。 （4）掌握了一天当中刷题的节奏：</description>
    </item>
    
    <item>
      <title>2021 09 19 Ddia Chapter4</title>
      <link>https://jupiterxue.github.io/posts/2021-09-19-ddia-chapter4/</link>
      <pubDate>Sat, 18 Sep 2021 22:20:31 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-19-ddia-chapter4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2021 09 12 Ddia Chapter3</title>
      <link>https://jupiterxue.github.io/posts/2021-09-12-ddia-chapter3/</link>
      <pubDate>Sun, 12 Sep 2021 00:07:08 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-12-ddia-chapter3/</guid>
      <description>已经读完第三章，这里对前面三个章节做个总结，与其说是讲如何设计技术架构，不如说分布式技术的一些常识：
 后端和服务端都值得学习分布式 日志以追加写入更高效，分文件存放便于检索 图模型  第三章笔记 </description>
    </item>
    
    <item>
      <title>读经典《DDIA》-第二章</title>
      <link>https://jupiterxue.github.io/posts/2021-09-11-ddia-chapter2/</link>
      <pubDate>Sat, 11 Sep 2021 23:02:05 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-11-ddia-chapter2/</guid>
      <description>已经看完第二章《DDIA》，说下我是怎么抄书的，以及我有什么收获。
0.什么？抄书？没错，我是边抄边写笔记。因为我就和你一样，看不进书（当然你比我更自律点）。开玩笑啦
1.当你不想看书的时候，就抄书；当你抄书抄到不想抄了，就想看了。虽然这句话被 S 老师作为段子来传颂，但我看到了有人抄过化学，有人抄过高数。我没有这种经历，也想亲自去实践一下到底有怎样的魔力。其次，我认为好的书是浅显易懂，深入浅出的，值得揣摩。
2.求其上者得其中，求其中者得其下，求其下着无所得。刚开始抄书是一件有点兴奋的事，因为抄这个动作是比较轻松的，因为理想中这是不怎么动脑子的。实际上由于你的专注，你会不由自主地关注作者在说些什么（虽然有时也会走神不知道作者在说什么）。并且由于抄书，你会开始对作者某个词语进行或多或少的思考。而抄书的困难也正是源于此，认真看和思绪漫游会导致你的阅读速度极大地降低，尤其在你发现抄了一两个小时，连一半都没有的时候，心情是有点绝望的，好在，你还可以明天抄嘛：） giao！
3.实事求是，实地考察。抄书中，你会发现作者写的话有多少冗余、多少用词不当。尤其我看的这本书原版是英文，翻译过来连句法还是英语的语法，根本不符合中文逻辑。所以我会将这句话进行汉译汉，转化为我自己能够理解的。大家都认为看技术不要看中文，因为中文和蹩脚，是的。但我再补充一句，你可以自己把蹩脚化为流畅。
4.简明扼要，提高速度。一直这么慢的抄写肯定不行，我在抄的过程中也逐步掌握了一些技巧：着重摘录抽象句式和实用句式，代码复制（看代码其实是最直接和方便的），详细参数说明忽略，图能动就不抄，不能动就用文字描述，不能用文字就截图、先摘录一二级标题，然后一个个攻坚（会有点成就感）。
5.暴力破解，巨无事细。抄书意味着会对每个地方都看一遍，找出是否有价值的地方。所以会对每个文字做一次简单的“有什么有用，是否摘要”的编码动作，这不同于看书。看书的时候，我很有可能是在想“这个不重要，过”。所以抄一遍下来，老师如果问哪一页哪个知识点，虽然你答不上来在哪里，但你知道，我确实看过，而不是看，过了。
6.建立根据地，逐步发展。即便中文的技术书读起来不是很顺畅，但大体意思作者是能够把握。最重要的是，当我看完了中文，我会对原书作者讲了什么内容有个大概的把握。所以看起英文来就更加流畅。
最后，这篇文章不是给看中文技术书洗白，只是想表达我在参与过程中的收获和感受。按照成熟的技术方法来说，看书、看文档还是以官方为准，以原版语言为准。地道的语言和没有信息损失的一手材料，才是好的学习资料。毕竟，高级食材，我们都吃原材料。
和小伙伴讨论章节内容，一个意外收获：
  我说：几种 Datalog 方法都没有听过，没有见过。好像是在说图结构有哪些处理方式，怎么表示更简洁、更高效
Helios 回复：主要还是场景不一样。
场景说得好，看完就局限在代码层面，一下又跳了出来。
  第二章笔记 第二章
数据模型在软件开发中最重要。不仅影响软件编写方式，还影响解题思路。
多数应用用使用层层叠加的数据模型构建，关键问题：如何用低一层数据模型表示。例如：
\1. 用对象或数据结构以及 API 来建模现实世界。
\2. 用数据模式表示存储结构。如 JSON、XML、数据库表、图，
\3. 用内存、磁盘或网络字节表示 JSON/XML/关系/图数据，进而来查询、搜索、操作。
\4. 在更低层次，用电流、光脉冲、磁场或其他东西表示字节。
复杂应用程序有更多中间层，如 API 的 API。但思想仍一样：提供明确数据模型来因此更低层次复杂性。这个抽象使得不同人员能够参与协作。
选择一个适合数据模型非常重要。因为种类很多，易用但不易支持，可操作但表现差，数据转化有的自然有的麻烦。
关系模型与文档模型
最著名数据模型——SQL。1970年 Edgar Codd 提出关系模型：数据为关系，关系是元素的无序集合。
关系数据库起源于商业数据处理，今天来看显得很平常：典型事物处理。
&amp;gt; 如：将销售或银行交易，航空公司预订，库存管理信息记录在库）和批处理（客户发票，工资单，报告）
并且当时数据库迫使开发者必须考虑数据库内部的数据表示形式。关系模型解决的是在实现细节隐藏在更简洁的接口之后。
网络模型和分词模型在 70、80 年代的主要选择，但关系模型随后占据主导。对象数据库在 90 年代由盛而衰。XML 数据出现于 21世纪初。
2010 年，NoSQL 开始萌芽，虽名字没有涉及任何技术，最初只是 Twitter 标签，2009 年非关系数据库开源会上这个术语的出现，迅速得到了传播。NoSQL 被重新解释为不仅是 SQL（Not Only SQL），NoSQL 流行的几个因素：</description>
    </item>
    
    <item>
      <title>读经典《DDIA》-第一章</title>
      <link>https://jupiterxue.github.io/posts/2021-09-08-ddia-chapter1/</link>
      <pubDate>Wed, 08 Sep 2021 23:25:30 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-08-ddia-chapter1/</guid>
      <description>算是等了好久，终于有机会来读这本书《Designing Data Intensive Applications》，中文名《设计数据密集型应用》，我们一般简称《DDIA》或者猪书（因为书的封面是一头野猪，Hog Riderrrrr～！）。读完这本书第一章，我也想极力向推荐给计算机和互联网行业做后端和服务端的同学。阅读背景 最初了解这本书是在曹大（曹春晖）的第一堂课上。曹大说自己看了那么多书，只有这一本是最好的，也推荐给大家（当时听完就有点热血沸腾）。后来我还发现，draveness 大佬在它的《程序员可能必读书单推荐（一）》https://draveness.me/books-1/ 中最后一本也提到了此神书。再后来，又去豆瓣看了看，中英文都是 9.7 分：
简单介绍一下，读《DDIA》能够 帮助我们建立一个分布式系统的全局概念，但还需要根据自己所在行业、所处业务和所面对的需求。前面一些章节和 rpc 有关系，中间一些和存储关系比较大，后面将大数据和流式计算。内容比较全，看完就知道分布式系统有哪些问题。
一个人可以走得很快，而一群人能够走得很远。读这本书，其实我是参与了一个小组的 github 读书项目，如果你感兴趣也可以联系我，我们一起参与这次读书之旅。
好，话不多说，开始卷！（以下为我简明扼要摘录的笔记，可以快速浏览）
第一章笔记 为什么要设计 现今很多应用程序都是 数据密集型（data-intensive） 的，而非 计算密集型（compute-intensive） 的。
CPU很少成为这类应用的瓶颈，更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。
数据密集型应用：
- 存储数据
- 缓存
- 索引
- 流处理
- 批处理
看上去平淡无奇是因为数据系统在抽象层面做得非常成功。工程师常常直接拿来用，而不是自己去做开发，因为数据库已经足够完美。
然而现实中还有各种不同的需求：多种缓存，多级搜索。重要的是有必要先弄清楚最适合当前业务的工具和方法。当单个工具已经解决不了我们的问题时，组合使用也有些难度。因此本书在探索如何设计数据密集应用的方法，以实现可靠、可伸缩、可维护的数据系统。
数据系统的思考 按我们的常识，为认为数据库、消息队列、缓存这些工具都是有差异的，但我们还是归类为 数据系统当中。虽然新出现了许多数据存储工具和数据处理工具，但类别之间的界限越来越模糊，比如：数据存储可以作为消息队列（Redis），消息队列带有类似数据库的持久保证（Apache Kafka）。
当单个工具不足以满足所有数据处理和存储需求，就需要将总体工作拆分成一系列能够被单个工具高效完成，并且通过应用代码缝合起来。如缓存（Memcached）和全文搜索（ES）结合将主数据库剥离，由应用代码来让缓存或索引和主数据库保持同步。
一个可能的组合使用多个组件的数据系统架构
多个工具组合提供服务，服务的接口或应用程序编程接口 API 会向客户隐藏实现细节。
设计 DIA 会遇到问题：系统故障，如何保证数据正确性和完整性？系统退化降级，如何给客户提供始终如一的良好性能。负载增加，如何扩容？什么样的 API 是好的？
影响设计的因素：参与者技能和经验、历史遗留问题、系统路径依赖、交付时限、公司风险容忍度、监管约束。
本书重点讨论：
- 可靠性。在 adversity 中（包括：硬件、软件、人为 故障或错误）仍可以正常工作。
- 可伸缩性。合理应对系统增长（数据量，流量，复杂性）
- 可维护性。不同参与者，在不同生命周期都能高效地在系统上工作（适应新的应用场景）。
可靠性 常见期望：
- 符合用户期望的功能
- 允许出错，还能正常使用软件</description>
    </item>
    
    <item>
      <title>反法西斯胜利，再读《毛选》</title>
      <link>https://jupiterxue.github.io/posts/2021-09-03-anti-jp-victory/</link>
      <pubDate>Fri, 03 Sep 2021 23:00:50 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-03-anti-jp-victory/</guid>
      <description>今天是个特殊的日子，9月3日更是个特殊的日子，从1945年开始的到今天、以后每年的9月3日也是最为特殊的日子——中国抗日战争胜利纪念日、世界反法西斯战争胜利纪念日。虽说是纪念战争胜利，但那个人伏案奋笔疾书的样子依旧在我心头萦绕，他就是我们可爱的毛委员。
大家都习惯尊称他为毛主席称，其实毛主席更希望群众称他为“毛委员”。在1927年3月完成的《湖南农民运动考察报告》后，他提到：“我到各处，常常遇到这种人，这样向我求情：‘请省里来的委员作保！’，自此大家都开始称他为，毛委员。
再读《毛选》 今天又重新翻了翻折满边边角角的《毛选》，按照时间线简单梳理了几篇比较耐看的文章：
第一卷：
 《中国社会各阶级的分析》	《湖南农民运动考察报告》
《中国的红色政权为什么能够存在？》 《星星之火，可以燎原》
《反对本本主义》	《论持久战》
《论反对日本帝国主义的策略》	《中国革命战争的战略问题》
《实践论》	《矛盾论》
 第二卷：
 《〈共产党人〉发刊词》	《新民主主义论》
 第三卷：
 《论联合政府》
 想到了什么 谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。中国过去一切革命斗争成效甚少，其基本原因就是因为不能团结真正的朋友，以攻击真正的敌人。——《中国社会各阶级的分析》
在真实世界有很多以上类似的情况，一个东西的表现和本质有差异。我们应该更多地在于发现一个事物它本来的样子，然后去接受它本来的样子，而不应该以我们自己的设想去看事情。
许多农民运动的道理，和在汉口、长沙从绅士阶级那里听得的道理，完全相反。——《湖南农民运动考察报告》
当你开始做一些事情的时候，有些东西和成长励志故事的逻辑是相反的。
有些同志在困难和危机的时候，往往怀疑这样的红色政权的存在，而发生悲观的情绪。这是没有找出这种红色政权所以发生和存在的正确的解释的缘故。——《中国的红色政权为什么能够存在？》
有些人会害怕走弯路，但只要花费了脑力、体力一定会有收获的。尤其做难事必有所得。
我们在红军中工作的人，一遇到败仗，或四面被围，或强敌跟追的时候，往往不自觉地把这种一时的特殊的小环境，一般化扩大化起来，往往不自觉地1把这种一时的特殊的小环境，一般化扩大化起来，仿佛全国全世界的形式概属未可乐观，革命胜利的前途未免渺茫得很。—— 《星星之火，可以燎原》
有些时候我们遇到小问题，会把它推演的过于悲观
中国全国都布满了干柴，很快就会燃成烈火。—— 《星星之火，可以燎原》
任何前进的方向，都有失败的可能。但对未来的良好信心，来自于一个基本面的判断。当抓好了基本面，就不怕上上下下的起伏。
结语 其实，《毛选》不仅仅是军事战略者常看的书，现今天的创业者也很热衷于此，更让你我没想到的是，还有一篇文章叫做《婚恋大事问毛选》。可以说《毛选》已经进入了我们家家户户，承载了我们中华文明最灿烂的一刻。
推荐大家去看一部电影，最能近距离感受到毛委员的亲切——《古田军号》。故事情节紧凑，人物细致，尤其细节做得很好，陈毅反复划窗以表思念、毛泽东得了疟疾而党员们在想怎样给他弄到金鸡纳霜治疗、朱毛会师时双手握手的交付，新泉会议时朱毛同板凳共思想屁股决定脑袋等等。
最后，感谢毛委员，给了我们这样一个盛世。</description>
    </item>
    
    <item>
      <title>业界大数据备份，还看爱数</title>
      <link>https://jupiterxue.github.io/posts/2021-09-02-bigdata-backup/</link>
      <pubDate>Thu, 02 Sep 2021 23:28:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-02-bigdata-backup/</guid>
      <description>随着进入信息时代，各行各业的数据都在爆炸性地增长，给人们带来便利的同时，也给人们对安全的担忧更胜一筹。目前，数据容灾备份领域呈现蓬勃发展，尤其在大数据软件灾备板块现实出了极大的市场潜力，比较知名和具有潜力的灾备公司有：爱数、精容数安、鼎甲科技。今天就来聊聊行业龙头“爱数”的大数据保护方案 Anyway。（图没有放，感兴趣可以看看参考资料）
行情介绍 市场情况——大数据平台市场规模持续增长
全球规模：4813.6亿 RMB
中国大数据软硬件：677.3 亿 RMB
中国大数据软件：92.2亿
预计未来5年大数据平台市场平均增长率为 25%
大数据分析业务，很重要，也是主要业务之一
应用行业
金融、医疗、电力、交通 等等各行各业
风险
一旦丢失，业务连续性无法得到保障！
三个主要问题：
  风险无法预测
  物资无法调配
  应急调度无法指挥
  挑战与常见问题（各行各业）
- PB 级数据，如何在有限的备份窗口内完成备份？
- 长时间保留海量大数据备份副本，如何降低成本？
- 如何确保备份数据的安全存储与合规保留？
- 如何实现精准备份和异构版本兼容？
爱数——AnyBackup 大数据平台保护方案 整个方案可以为不同大数据平台提供备份和恢复的能力，包括：Apache Hadoop、华为 Inside、CLOUDERA CDH、星环科技 TDH。
在这些大数据平台下，爱数能够提供的备份能力：面向表级别粒度的备份恢复、数据一致性问题、基于 hdfs、hive 等不同组件来实现永久增量备份和多节点之间并发备份，还提供重复数据删除等基本能力。
提供的恢复能力：表级粒度恢复，多并发恢复，任意时间点恢复，不同大数据平台之间异构的恢复能力，
爱数还提供的独有能力：96 倍备份效率，90% 存储资源节省，数据安全存储和规范，面向不同的大数据平台、不同大数据组件提供全面保护
具体说明-爱数的特点
 提升 96 倍以上备份效率  传统备份方案，全备数据量要备份 1PB，备份时间在 6-7 天。
爱数完成全备后，后续都是增量备份，并且以 10T 为单位。在更短的备份窗口中完成全备
节约 90%存储资源  通常在给用户做备份策略配置的时候，是保留一个月备份数据。其中会进行四次全备，每天实现增量备份。</description>
    </item>
    
    <item>
      <title>自己做菜自己吃，两个小汤菜</title>
      <link>https://jupiterxue.github.io/posts/2021-08-29-two-meal/</link>
      <pubDate>Sun, 29 Aug 2021 18:24:02 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-29-two-meal/</guid>
      <description>昨天闲来无事，历时3小时，自己动手做了两道菜：酸汤肥牛和清炖排骨。自己很少做菜，也几乎没怎么做过菜，没想到第一次做出来味道也还可以，但也有几个踩坑的地方，今天来复盘一下。
买菜篇 一是被推荐有个小程序“叮咚买菜”，二是平时通勤发现外卖小哥都有专门送叮咚买菜的车和衣服，三是因为是新人注册，有满减优惠券。有了网上买菜+配送，打消了我不想出门、不想到处逛选菜的麻烦；有了满减优惠，让我忍不住多买了些食材：
 肥牛卷 300 g，24 玉米 550g，9 山药片 200g，6.5 鹿茸菇 125g，2 番茄 500g，3 猪肘块 350g，10 绿豆芽 300g，2 排骨 300g，20 金针菇 200g，5 酸汤肥牛调味料 95g，12 贴心调味组合（小米辣+蒜+姜） 120g，4 泡菜组合（小米辣+豇豆+青菜）850g，6.5 蒜蓉酱 240g，12  新人卷 45-20、49-19，所以最后开销为 77 元，真的没想到自己买菜来做这么便宜，两个菜的食材价格能够顶得上外面一个菜的价格。
小细节 网上下好单，叮咚买菜的小哥过了大概30分钟就提着大包小包送到了我的家门口。像易碎的蒜蓉酱（瓶装）还单独给我装了一个轻拿轻放提醒的袋子，隔绝了其他菜。小哥还很热心地自我介绍了一波。
食材处理篇 提前在 B 站上看一两个做菜短视频，熟悉了清炖排骨整个流程。
因为买了排骨和猪蹄肉块，担心有腥味。所以先用冷水+一点料酒提前浸泡了一个小时，然后跑到一遍去玩了：）
轻煮肉块。将浸泡料酒的肉冷水下锅煮，煮到没有血色就捞起。这里失误了，因为没有加姜葱蒜一起去腥，所以重新来了一遍，把肉捞起来，加入姜葱蒜，再煮了一会儿。
香煎肉块。锅热倒油，将煮好的肉块放入进去，煎到有点紧实和焦黄。
小火慢炖。往煎好的肉中加入少量料酒，再导入热水，盖上盖子小火炖煮一个小时。
在这个期间开始准备另一道菜，同样的先看了看两个酸汤肥牛的短视频，然后动动手了。
先将玉米切块，番茄分别切块（给清汤）和切碎（给酸汤），山药片和鹿茸菇都直接洗出来。金针菇和绿豆芽也直接洗出来，但总感觉不放心，去分别看了看大厨怎么处理这两个食材的。然后我也把金针菇的根切掉很多，把绿豆芽的头和尾都掐掉。
40分钟小时后将切好的玉米、山药、蘑菇都加到了清汤里和排骨猪蹄一起炖煮。
在这期间把肥牛拆开用冷水浸泡一分钟，过滤掉血水。烧热水，在锅中过5秒豆芽，过5秒金针菇。这里金针菇应该过 15 秒，所以捞出来看起来还有点生。
准备肥牛汤。锅热导入少量油，然后放入干辣椒、蒜蓉酱、姜、蒜，爆炒1分钟的样子，然后加入清水，把干辣椒、姜都捞出来。等到水热后加入肥牛汤料。
烹饪 清汤排骨猪蹄。在合着玉米、山药、蘑菇煮了一个小时后，加入番茄块煮10分钟。然后加入一点盐和鸡精。美味就起锅啦！
酸汤肥牛。在肥牛汤准备好后，加入肥牛煮熟，不需要多久。因为担心金针菇没有熟，就在肥牛煮熟后放进去再煮了一会儿，再加入绿豆芽。这里也弄错了，导致肥牛吃起来很老，应该先把肥牛、金针菇单独煮好，然后放进热汤中。
最后，两道菜就都成功啦。吃到我撑了，还想再吃一块排骨或者一夹脆脆的绿豆芽与金针菇。
总结总结  网上买菜非常方便，新人还有巨大优惠（快薅羊毛）。 处理肉类时，用到姜蒜葱和料酒一起提前煮可以去腥味。并且，料酒还是个煮汤的好伙伴。 易熟的菜和肉不能久煮，最后起锅、开动前再加入即可。 自己做菜自己吃，健康好吃还能吃，就是有点费时间。  </description>
    </item>
    
    <item>
      <title>对于&#39;极简主义&#39;的一点看法</title>
      <link>https://jupiterxue.github.io/posts/2021-08-29-minimalism/</link>
      <pubDate>Sun, 29 Aug 2021 18:21:22 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-29-minimalism/</guid>
      <description>前几天看到 “S522-花样”同学写的一篇文章《极简=极奢》，今天想来谈谈自己对于“极简主义”的想法和认知。
乔舒亚在《极简主义》中的概括为：极简主义不是要你一无所有，而是要你穿越物质的海洋，找到真正重要的东西。
虽然极简主义起源于 60 年代，但真正蓬勃发展，我想很大可能是因为史蒂夫·乔布斯。
最初了解到“极简理念”是在李善友老师的《第一性原理》中讲解“乔布斯专题”中的一个苹果公司动画，当时这个动画真的惊艳到我了，怎样的设计理念才能做出如此佳作，仅仅是黑白线条、原点和文字，就能尽情表达：行云流水，自然流畅、灵动跳跃、坠落与水流、突破预期、如吹自然界的风、如朋友间的沟通。话不多说，你可以康康：《苹果广告——至繁归于至简》https://www.bilibili.com/video/BV1Rs411E7Pw?from=search&amp;amp;seid=13506173852847306812
因此，我从18年到现在，就一直很喜欢关于“极简主义”的话题。尤其在看《乔布斯传》的时候特别痴迷，《乔布斯在他的家中，1982年12月15日》，这幅图片一直印象深刻（虽然每次看都像是汤姆·克鲁斯），每当我想到极简生活就会联想到：https://o.aolcdn.com/images/dar/5845cadfecd996e0372f/81062ddbeaac7699cf47b901b18adebdb48c046d/aHR0cDovL3d3dy5ibG9nY2RuLmNvbS9jbi5lbmdhZGdldC5jb20vbWVkaWEvMjAwOS8wMS8wNjJiLmpwZw==
![u=1816380262,1947610985&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG (1)](C:\Users\Xfavor\Desktop\u=1816380262,1947610985&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG (1).jpg)
这张照片拍摄于乔布斯27岁，并登上《时代》杂志封面。正如乔布斯给这张照片写了题词：&amp;ldquo;这是一个经典时刻。我独自一人，所需要的不过是一杯茶、一盏灯和一台音响。你知道，这就是我的全部。&amp;rdquo;
很喜欢像乔布斯当时所处的环境，一盏灯、一个什么都没有的空荡荡的房间，当时在大学就在想，我以后的生活，也想这样过。后来，现在自己也确实在这样做（当然遭罪的是自己）。然后慢慢体会到，极简是从最简单开始，而生活不是苦修，需要什么再慢慢添加什么。
再后来，读到一篇王垠对苹果手机 Home 键的批判中终于脱离了这种类似宗教的信念。王垠说到，虽然苹果手机在界面上之保留了一个按钮，给用户带来了极大的简化，但内部的细节无疑非常复杂，给维护的人员造成了极大的复杂。所以，极简一说也有对象之分。
不过，现在的极简主义的理念也逐渐被商业化了。相比于消费主义和物质主义，无疑减少自己的欲望、少购物是极简主义所倡导的。但商业总是无孔不入，商业是制造需求。既然我们那么崇拜极简主义，那么就推出看似极简的产品与服务让你购买。并且这些产品旁通常还放有单一色彩的广告语“拥有的越少，生活过的越有意义”之类的语录。正是这种类别划分，将极简主义完全商业化。越来越多自称为“极简主义者”的人忙着营销和收割。
如今，大家都在提倡极简，时尚极简、家具极简、生活极简，甚至精神极简。这些都没有问题，甚至是好事，因为在这样一个复杂度不断增大，熵不断增加的世界，有人在反向探索。探索社交的初心，探索生活的放心，探索精神的静心。商业社会虽然会把种种妖魔化，但并不阻碍探寻真相的勇士逆流而上，找到那个本源，找到那个一。
[1] 从苹果产品的设计错误学教训, 王垠
http://www.yinwang.org/resources/ciia1.pdf
[2] 极简主义, 豆瓣
https://book.douban.com/subject/34901087/
[3] 极简主义真的能让我们更快乐吗？
https://www.thepaper.cn/newsDetail_forward_7120725</description>
    </item>
    
    <item>
      <title>两个自动化管理工具</title>
      <link>https://jupiterxue.github.io/posts/2021-08-25-github_action-and-review_dog/</link>
      <pubDate>Wed, 25 Aug 2021 23:10:23 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-25-github_action-and-review_dog/</guid>
      <description>最近在写微信公众号的同时，也在同步开通 Hugo 搭建的个人博客。在曹大的课上了解到了两个开源工具：Github Action 和 Reviewdog，都是和 CI/CD 自动化相关的。而我最早是在 B 站一个 UP 主“遇见狂神说” 的 10 分钟短视频讲解中了解到的 CI/CD。惊奇地发现 Hugo 搭建的博客特别适合用到这两个工具。于是怀着特别的兴趣和好奇，去了解了一下。今天仅简单地来谈谈这两个工具的相关介绍。
CI/CD 首先，什么是 CI/CD？其实说的是三件事情：持续集成 (Continuous Integration, CI)、持续交付(Continuous Delivery)、持续部署 (Continuous Deployment)。其实这里单独一件事拎出来做也能做个不错的项目，不过三者搭配食用，风味更佳。
持续集成 (Continuous Integration, CI)，通常是指在程序员合并 merge 代码的时候不断对代码变更进行验证。一般用于集成时跑单元测试或者接口测试，如果未通过，那么工作流会用社交软件或者邮件通知相应的开发者。更重要的是，CI 流程中的测试代码既保证了新代码不会破坏老的业务功能，还保证新代码能编译通过。预期输入应该能够得到预期输出，如不符合的结果要报错飘红。
持续交付(Continuous Delivery)的目的是最小化部署或释放过程中固有的摩擦。它的实现通常能够将构建部署的每个步骤自动化，以便任何时刻能够安全地完成代码发布（理想情况下）。
持续部署 (Continuous Deployment)，是一种更高程度的自动化，无论何时对代码进行重大更改，都会自动进行构建/部署。能够将部署流程平台化，可以按照天、周、双周发布。发布只需要点一个按钮，就可以把代码部署到测试或者线上环境。并且即便每次改动都很小，部署流程也能够在有问题的时候及时发现。目前大多数公司都在使用这种流程。
GIthub Action CI/CD 持续集成可以玩很多有意思的东西，比如自动抓取数据、定期测试代码、一键打包项目自动登录远程服务器并发布到第三方服务等等。
作为全世界最大交流平台，GitHub 在这方面有一定话语，把这些操作统称为 actions。GitHub 注意到，由于许多操作在不同项目里面是类似的，且可以实现完全共享。于是想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，这样其他开发者也可以使用。如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 就好。因此，整个持续集成过程，就变成了一个 actions 的组合。
Review Dog reviewdog 是一种可以与任何代码分析工具持续集成的自动化代码审查工具，无论是什么样的编程语言都可以接入。
reviewdog 提供了一种特殊方法，通过与任何linter工具轻松集成，自动将审查意见发布到代码托管服务。它使用 lint 工具的输出，并在发现需要审查的补丁时将其作为评论发布。正如其名字所说，拥有一只能够做代码评审的狗勾，让你的代码库保持健康。
结语，后面有机会对这两个工具的使用做一个详细的介绍，敬请期待。
参考资料
[1] 【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps, Bilibili
https://www.bilibili.com/video/BV1zf4y127vu?from=search&amp;amp;seid=15753722902113310493
[2] 什么是 CI/CD？Linux.cn
https://linux.cn/article-9926-1.html</description>
    </item>
    
    <item>
      <title>性感、美食和学术？</title>
      <link>https://jupiterxue.github.io/posts/2021-08-18-sex-research/</link>
      <pubDate>Wed, 18 Aug 2021 22:01:22 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-18-sex-research/</guid>
      <description>当我们的开始看论文、接触到学术研究后会形成一个感知：科研工作往往都是在进行复杂的实验、写出带有各种样式的图表和复杂的数学公式，最终生成的长篇大论。但今天我彻底颠覆了这一刻板印象——做科研也是“性感”的。？？？对，你没有看错，今天想来讨论中国知网推出的《研究生科研素养提升》系列学术讲座的其中一期。
介绍 这期讲座是在 2021-08-18 15:30~17:10 开展的。主讲人是北京交通大学教授、博导师，华国伟。他的主讲题目是《做最“性感”的研究》，一看到题目，是不是就觉得有点意思？
华老师开篇讲到，“性感”这个词常用于表达吸引异性的场合，而他的讲座并没有这个裸露的含义，而是隐喻：我们做学术也可以吸引其他做学术的人。同时，华老师还提到了一个小故事：
 有本书，名叫 《How to change your wife in 30 days》，一个星期之內售出200万本。直到作者发现，书名拼写错误，正确的应该是： 《How to change your life in 30 days》。改正后整整一个星期，只卖了3本。
 华老师希望我们来听他的讲座不是因为他的主题名字吸引了我们，而是真正对科研感兴趣，对科研是“性感”的、如何做好科研这个话题感兴趣来听的。
华老师为了做这场讲座看了许多论文和书籍，也推荐我们去看两本书：《靠近点 科学史最性感的世界观》、《性感的公司》
然后明确了这期讲座的三大言简意赅的提纲，向我们提出了三个问题：
开始正经 好，华老师开始正经地讲授科研了，大家严肃一点！
（缓冲区）
（缓冲区）
（缓冲区）
同学们，我们做学术是要有预期的，最开始我们是&amp;hellip;
不敢相信，这是科研讲座？？
哎呀呀，同学们，你们一定要记住，科研的三条秘籍：勤奋！勤奋！勤奋！连最聪明的人都在用着这个最笨的办法，但这还不够，做科研还要 欲望！冲动！血脉喷张！
这。。。我们做科研要像毛！血！旺！
小插曲 由于其他同学听得太用心，已经开始产生了幻觉，上演了一场买瓜好戏？
知网官方：同学们不要讨论其他与学习无关的东西
那么你的问题来了，买大西瓜还是小西瓜合算呢？
（两块钱一斤！哈哈哈，作为理科生的我，羞耻地去搜了搜答案）
做有价值的工作 华老师对我们科研宝贝们的论文比喻简直了，一个字，绝！
看论文我们要看看国外是怎么做的，这又会遇到一个问题：
（这么一堂科研学术讲座，活生生地做成了一趟美食之旅，让公屏后面的同学们都馋哭了吧）
写论文的要点，老师比喻地真是无懈可击。
我们看到数字对比能更加敏感，看到图片能够直观感受，听到老师的段子会忍不住哈哈大笑。
引用的故事在老师讲起来真是太搞笑了吧。
以上都是在听讲座过程中随手截取的图。
最后，华老师以优雅的姿态结束了本次讲座，惊艳了我们所有人：
（华老师结语祝福，希望你能看懂）
为什么这堂讲座口碑这么好 华老师在课间答疑说道：这个 PPT 其实在 2008、2009 年就有了，但新书一直都没有憋出来。也想出一个课程，希望能够对大家感兴趣、有困难的科研部分提供一些帮助。并且在这次讲座之前已经有300页的 PPT 内容，近好几个小时的演讲量。而为了这次讲座，将 PPT 极力压缩到了 80 页左右，为期 一个半小时讲座时间内完成。
后来，我思考了为什么华老师的讲座口碑这么好？华老师在讲授期间金句频繁，绘声绘色、有段子还有图片。背后是老师长达十多年的积累、对生活的热爱、对时尚潮流的关注以及对科研最崇高地尊敬。虽然老师有的比喻不是很恰当，略有点直白和低俗，但可以发现老师将他科研毕生所学的抽象概念都融汇在了我们生活点点滴滴的真实案例中。我们缺少阅历，但并不妨碍我们能够像老师学习，学习换位思考，尽可能地去设想另一个学者、编辑、作家、医生在想什么、做什么。并且我们能够在华老师这么一堂声色俱佳的讲座上重新捡回做科研那份初心，始终不忘如何探究、如何概括和总结。
最后，讲座不用我强烈推荐了吧，看图就好了，记得关注老师的微博“我是华国伟”，关注老师出书和课程的最新动态。放一下讲座 《华国伟 - 做最“性感”的研究》源地址：https://k.</description>
    </item>
    
    <item>
      <title>写技术文章的要点</title>
      <link>https://jupiterxue.github.io/posts/2021-08-16-tech_write/</link>
      <pubDate>Mon, 16 Aug 2021 22:52:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-16-tech_write/</guid>
      <description>磨刀不误砍柴工，程序员在写代码、写文章之余还是值得去了解重构代码、测试代码、如何写文章等辅助性的技能，虽然有时有点务虚，但从长远看却是实打实地有用。今天讨论的主题是“写技术文章有哪些要点”。
首先，我们需要对技术文章进行一个分类：
 知识总结。  比如你在公司内想要做个什么系统，你不知道，就去 Google 用英文搜一下。把第一页都消化吸收了就能出一篇总结性文章了（也就是老板常说的去调研一下）。业务问题 → Google 搜索 → 消化内容 → 总结 最近对流式计算感兴趣，我也可以 Google 去搜 &amp;ldquo;stream processing&amp;rdquo;，不过搜出来的知识点都比较零散。而我想要更完整的知识体系，那么我就去亚马逊搜书 &amp;ldquo;stream processing&amp;rdquo;。大致了解到有哪些关键词后，我们就去更加专业的渠道去阅读它——learning.oreily.com/library，然后就可以输出笔记了。 流式计算感兴趣 → 读书 → 读书笔记。   项目总结。  公司项目 → 完成之后 → 调研更高级项目 → 复盘总结。 公司问题提炼。业务脱敏，只把关键技术部分整理出来 → 输出。   教程指引。翻译官方文档，补充一些在使用时候会遇到的坑。  Yutube 上很好的国外的视频分享 → 怕忘记、感兴趣 → 结合自己的理解记下来。 内容翻译。medium，lobster，acm 里不错的新论文，acm queue，macm 杂志上的文章，都是不错的翻译目标。    小插曲：注册 ACM 会员再用同样的账号去注册O`reily，能够免费阅读里面大部分的书。价格为 25 刀，可以搞个双币信用卡呀，招行就行，现在学生账号可能不行了，不过用绑了 paypal 的卡就行好像。
 如果对电子书不排斥的话，目前比较经济的选择是申请一个国内的 ACM 会员，并且用该会员去注册oreily 在线书店。一年大概 20 美元，可以及时地阅读到大部分出版社的技术出版物。因为现在出版社的网站大多还支持 early preview，所以你甚至可以在书籍还没有上市之前就预先学习内容，第一时间获取整个业界的一线情报，能够帮助你站在时代的潮头。——曹大</description>
    </item>
    
    <item>
      <title>七夕荐电影《当男人恋爱时》</title>
      <link>https://jupiterxue.github.io/posts/2021-08-13-when-man-love/</link>
      <pubDate>Fri, 13 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-13-when-man-love/</guid>
      <description>明天就是七夕节了，本来今天应该更技术文章，暂时放一放，让美好暂留一天，今天来聊一部爱情电影。
爱情并不完美，而爱情电影往往都是那么天真浪漫，这和现实生活产生了巨大的冲突和矛盾，即便如此，依就阻止不了我们对于美好爱情的向往和憧憬。《重庆森林》已经被我看过4、5遍，里面没有讲述重庆、也没有讲述森林，而当你想恋爱了、当你失恋了，这部电影就很贴近你的生活，就和你有关系了。即便是1994年的老电影，至今 2021 年仍然爱不释手。但今天要说的不是《重庆森林》，而是另一部听名字就有点意思的电影——《当男人恋爱时》。
发现 最初了解到这部电影的时候是无意间看到的一篇影评，2021年6月11日在中国大陆上映了电影《当男人恋爱时》[1]，这篇影评不仅讲述了电影中的情节，还将另外一部于2014年1月22日上映的同名电影的故事情节和剧照都晒了出来。真的是没有对比，就不会知道自己喜欢哪个。当我一看到这副剧照，我就知道，我喜欢老版本的电影！（左图）
感受（略有剧透警告） 这是一部出产于韩国出产的电影，我们都知道前些年，韩国在爱情无论是电影还是电视剧上都是比较俗套的，但这个俗套不是贬义，而是说韩国做的挺好，对于爱情剧情的理解以及形成了套路。虽然抱有一点，烂俗韩剧的心理去看电影，但看完之后真的让我忍不住想推荐，尤其是很难找到那么清新脱俗的痞子。
剧中饰演男主的黄政民，是个混混老大，但他看起来并没有我们刻板印象中的傲慢不羁或者凶神恶煞。而一如反常的是呆萌的形象，你能想象，兔子生气了冲撞你吗？哈哈。不过确实，黄政民大叔在剧中的代入感真的太强了，从收租要钱打架斗殴，到温文尔雅绘图签字，再到二人对视哭泣，每一幕的演技都细致入微。前部分塑造的粗犷暖男形象，和后半部分营造出的密集泪点效果都简直出神入化。就像一位评论者所说：“来为黄政民大叔写个影评 这片要是换个帅哥演，我真不一定看。 ”
剧情我就不介绍了，仅用几句电影中的话，来表达我在整个电影的直观的感受：
 喂！我都说爱你了，你什么感觉都没有吗？！
  哥，你倒是知道什么是爱情吗？最起码不是这样的，以后利息钱我会汇给你，不要再联系了！
  以前其实我差点结了婚的，但是我他妈的给搞砸了
  （花大钱给妹妹买了新的店外装饰）这是我妈给你的（钱），怕你没钱用，说要跟我爸保密。。这是我把给你的，还说要更我爸保密。。我爸我妈完全不沟通，这是个事啊。
  （一边吃着泡面一边和他爸爸交待身后事）因为她是您儿子这一生最爱的女人啊
 原本我以为爱情电影都是这样的狗血，剧情都会多少有煽情、有泪点。已经有心理防备的我，在感受到剧中男主女主面对面那份伤心时，也忍不住眼睛红了。我想，如果你是个泪点低的，那么这部电影真的可以算上，好好哭。
总之，这是一部很 man 、很直男、很浪漫、很悲催而又很美好的爱情电影，至今也让我回味无穷，所有的剧情可能都忘了，但还是忘不了看起来萌萌的男主说出的那句表白的话：“我爱你，妈的”。 哈哈，真是率真又可爱。
最后，可以去豆瓣点个在看，点评一下看过的电影或者看过什么书。如果你和我读过、看过的有相同，那可真是幸运，欢迎关注我的书评、影评：Jupiter 的个人主页-豆瓣
资料
[1] 台韓男人的浪漫大戰？《當男人戀愛時》與原版《不標準情人》有何不同？穆光光, marieclaire, 2021-05-03
[2] 当男人恋爱时, 豆瓣
[3] 如何看待黄政民在电影《当男人恋爱时》中的表演？知乎
[4] 影迷评《当男人恋爱时》：演技精湛 催泪感人, 新浪娱乐, 2021-06-08</description>
    </item>
    
    <item>
      <title>论—如何看论文与写技术文章</title>
      <link>https://jupiterxue.github.io/posts/2021-08-12-write/</link>
      <pubDate>Thu, 12 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-12-write/</guid>
      <description>最近成长会的小伙伴推荐了一个系列讲座“2021年“研究生科研素养提升”系列公益讲座”，看到这个题目，不禁联想起自己大学最初的梦想，如果，如果没有当初也便没有现在的自己，就不多说了。翻了翻里面有哪些主题的课程讲座，发现最让我感兴趣的是徐铭梓老师推出的“中国知网辅助论文读写效率提升”，今天讲的主题就是“论—如何看论文与写技术文章”。
这里又不得不提及，在我们成长会中，每年 Scalers 老师都会亲自带队，在为期几个月的时间内带我们进行专题性阅读。什么是专题阅读？比如这期的主题是“经济学”，我们会从曼昆的《经济学原理》的微观与宏观开始看，再到《经济思想史》和《解读中国经济》。像《经济学原理》都是经贸领域同学的本科专业教材，都是大部头，不过我们也是按照每天一章、两章的阅读量在阅读。光阅读还不够，我们每天还会回答 S 老师布置的问题，当天看书当天答题，我们社群有个全新的文化——日毕。我参加过几期这样的专题读书活动，也深刻感受到 S 老师出题之深刻，就比如：调研和概述中国近20年的财政情况、股票市场是否存在稳赚不赔的方法、2018年中美贸易摩擦到现在的变化情况，以及搜集近五年政府工作报告分析财政与货币在政策上的变化等。这些问题无一不是好几篇研究生甚至博士生所研究的问题，因此我们在回答这些问题的时候会经常性地去关注学术论文是怎样看待这些问题的。
既然要看学术论文，有没有什么常识或者说常用的套路呢？回到最开始提及的那位老师，徐铭梓。我好奇地拿着她的名字在谷歌上搜了一下，没想到直接找到了她在去年4月份在知网上发表的一篇免费教学PPT——《论文阅读与写作入门》，里面详细地讲述了作为一个科研人员，需要保持什么样的做学术和看论文的正确理念，分类地讲述了不同段位的研究者应该从哪里、看什么、怎样看论文，详尽地阐述了论文的基本阅读方法。
然后徐老师又说到了笔记与文献的摘录，她引用了梁启超先生的一句话：
 读书莫要于笔记，朱子谓当如老吏断狱一字不放过， 学者凡读书，必每句深求其故，以自出议论为主，久 之触发自多，见地自进，始能贯串群书，自成条理。 经学、子学尤要， 无笔记则必不经心，不经心则虽读 犹不读而已。
什么方法呢？极笨极麻烦的， 抄录或笔记 ——梁启超《读书分月课程·学要十五则》
 这里让我联想起了，我们程序员应该怎样来写科技文章。最近在 Go 技术群里，在热烈地讨论一个问题“作为程序员，自己知道点东西，但写着就感觉别扭，于是就写不下去。并且大多时候都像是知识储备不够，每次都感觉在抄袭别人的”，大家都表示同感，毕竟东西就是那些。还有有些同学自我安慰道，就觉得是把别人的文章用自己的话说一遍，把别人画好的图自己再画一遍。
在我们群里的技术巨佬，他们是怎么说的：
  把别人文章中的图自己画一遍，不算盗图，并且自己画一遍挺好的。
  程序员写文章整段整段贴代码不合适，贴出来关键核心代码就可以了，然后重点的是要有一些提纲，例如你分析过程，总结这些。
  总的来说，一篇优秀的技术文需要有：
 取好标题，醒目突出中心
图文并茂，适当配图说明
篇幅适宜，不宜过短也避免冗长
格式统一，基本排版规则需要遵守
细节处理，错别字标点处理正确。
   是的，就像我所喜爱的作者王垠所说“每次仇恨一个东西，你就失去了向它学习的机会。”，我们普通人没有经过专门的写作训练，面对一下写几千字是比较困难的，更难得说输出技术文章。在我看来，学习技术都是从模仿开始，不要介意抄袭别人的，不要介意别人已经做过了，要亲自动手，事必躬亲。你要清楚地知道，那是别人的东西，不是你自己的，就像那是装在别人兜兜里的钱，不是你自己能使用的。
关于《论文阅读与写作入门》我就不继续展开来讲了，如果你有兴趣，就去探索吧！好奇心，能够让你学会更多知识与技能！</description>
    </item>
    
    <item>
      <title>微信公众排版</title>
      <link>https://jupiterxue.github.io/posts/2021-08-08-wxpb/</link>
      <pubDate>Sun, 08 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-08-wxpb/</guid>
      <description>已经开通微信公众号两周了，但公众号的发文机制和排版机制让我有些头疼，今天来探讨一下——微信公众号的排版与运作机制，先列出我在这里写作最直观的感受：
 不能用 Markdown 写文章，识别不出来，空行也会被解析掉。 一天只能发布一篇文章，第二天才有新的可发布量。 可以修改文章，但修改后的关注公众号的读者看的文章还是以前的文章。 修改后想让读者看到，就需要重新发一篇，以前的会保留。  所以我的问题来了：
 文本输入不能支持 Markdown 语法那支持什么语法？还是说有什么办法可以转化？ 一天只有一篇文章的发布量，是否有什么方法增加发布量？或者说有预发布功能？ 想要修改文章、能够让读者看见，又不减少发布量，有可行的方法吗？  作为程序员，我们一般习惯用 Markdown 来写文章，因为排版的方式有点类似于代码的方式，并且操作的方式也类似于编码的方式，有快捷键、能插入不同语言代码。如果你想试用，这里推荐你试用一下 Typora，一个看起来非常的美观的基于 Markdown 的编辑和预览器，这个软件还有一个视图查看方式就叫做“源代码模式”。但是问题就出在，直接复制用 Markdown 写好的源代码文章，粘贴到微信公众号却不能直接识别出来，里面的文本和标识符识被识别为了纯文本，空行没有了，文字上的超链接没有了，图片也没有了。真的有点，气急败坏。然后尝试直接复制 Typora 预览模式下的文章到公众号。确实效果达到了，但也出现了一个问题：用了引用的格式却不能删除、多复制了几段空行却不能删除。又是气急败坏，去找了下解决方案，一开始找到了网站 Mardkown 转 微信公众号，经过一次尝试发现有的图片没有加载进去，遂放弃。后来几经折腾发现还是这个网站有用。第一次真的眼睛瞎了，为啥没尽早用到！！
官方怎么说 下午的时候对以前发过的公众号文章做了修改，但是只有自己能够看到。已经关注的粉丝（粉丝竟是我自己）查看文章还是原来的样子。所以去看了看一些资料，惊奇地发现，能改内容，但是：
 已群发的图文消息可以修改，其他类型消息暂不支持。每篇图文支持修改1次，且最多可以修改10个错别字（注：标点、英文、数字、空格都计算在内），支持增删。 如果要修改需要：登录微信公众号电脑端 → 首页 → 已群发 → 消息列表 → 悬停点击已群发单篇图文上有个“改”的按钮，点击即可打开修改页面，修改提交后需要管理员微信扫码验证。 微信官方希望每条推送都是公众号运营者深思熟虑的结果。秉承对读者负责的原则，更好的保证用户的阅读体验，修改五个以下的错别字也是为了尽量避免出现重复阅读时内容上前后不一致的情况。 推送到用户端的内容无修改权限，不仅仅是为了尊重用户前后一致的感知，技术上也不能对用户端的内容做修改。 有两种情况无法修改：一、辟谣：文章被发起辟谣且待审核或文章被发起辟谣且审核通过；二、已删除的文章。  总之，写公众号都是在每次深思熟虑之后再写，并且今天在探索后发现，还有预览的功能。
最后的最后，不要水微信公众号，不然又浪费一天 （的发布量）：）。
一些常识和技巧  不加首行缩进。 默认微信字体 16 号，建议用 15 px。粘贴字体进入微信后，先全选“清除格式”（或者 Ctrl+shift+V，直接祛除格式粘贴），就会变成微信默认字体，再选中 15 px 字体 间距 1.5 当文字之间有图片时，上下空一行。给受众呈现更好的阅读体验。 段落保持在三思行。 两端缩进。更适合手机阅读，看起来更有质感。但不太适合代码阅读，因为展示面小了点。 GIF动图。保存动图时需注意格式应为GIF格式且不能大于2M。 永久链接。即预览文章，如果需要别人帮忙改，预览的链接具有时效性。所以去用户界面找到自己的微信，把你想要预览的文章发给自己即可【注意:48小时内自己与自己的公众号互动才行】  常用编辑器好用推荐   秀米 主要用。 有非常多的漂亮模板，可以粘贴全部或部分。</description>
    </item>
    
    <item>
      <title>如何在 Go 高级工程师训练营生存</title>
      <link>https://jupiterxue.github.io/posts/2021-08-04-how-to-survive-in-senior-go-class/</link>
      <pubDate>Wed, 04 Aug 2021 14:42:49 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-04-how-to-survive-in-senior-go-class/</guid>
      <description>前言 大家好，我是 Jupiter，目前从事的是 Pyhon 和 Go 的后端开发，现在是我们 Go 高级工程师第一期的学员，也是 3 班 7 组的组长。这周三的时候谢大邀请我来做个学习交流，很荣幸能有这样的机会给大家做个这样的交流。
一听到第一期学员，大家是不是觉得很厉害的样子。啊，没错，面向谷歌编程，复制粘贴代码的能力还是挺厉害的。不是，这期训练营教会我的当然不是复制粘贴那么简单，而是一个全方面的提高、一次格局拓展的经历。
像大家一样，看到有这么一个大咖云集的训练营，曹大、谢大、askuy、小 R 大（额，这里有的套娃）、听闻、邓大明、博锋，已经热血沸腾。再看了看价格，也不算很贵。相比于出门左转右转看到的黑马达内千峰，在价格上已经比较低了。机不可失时不再来，如果要问还有没有下一期，那可能我们第二期可能就是最后一期，嗯，最后一个第二期。
制定学习计划 在这次训练营开始前 5 月初时候，我是有点焦虑的。我是从 Python 转到 Go，几乎是没有什么 Go 基础，而这个训练营是面向 Go 高级工程师的。好像大家常见的语言转换和零基础，都被我撞上了。好在开营还有十多天，我做了两件事，让我在后面的学习节奏保持一个相对稳定的状态。
第一个就是制定学习计划。为期四个月的时间，120天，我很期待这期间所能够发生的许多奇妙化学反应。像往常一样，课前XXX，课中XXX，课后XXX。
课前：
   学习工具：搭建好环境、购买好 tizi 和相关工具 预习：把曹大推荐资料都读完，课程大纲自己绘制熟悉于心 问题：每次提前阅读完材料，一定要带着问题去听直播    课中：
   社群：积极参与任务，主动担当队长、副队长、主动去整理资料告知信息争做小助手 社区：每日浏览 GoCN 新闻，浏览关注的Go博主公众号和 Up 主视频 直播课堂：每次直播课都准时到，积极参加回答 大佬：多和老师曹大、助教、谢大沟通    课后：
   整理课堂笔记，发知识星球或者成立小组。整理出 github 博客 每次作业最迟第二天完成，不拖到第三天。 每天掌握一个面试问答。需要记录下来，整理出 github 博客    当然还不止这些，我还用到了风险管理与保险原理的一些方法。我向自己提问，风险有哪些？防控措施有哪些？</description>
    </item>
    
    <item>
      <title>从“名家谈写作”我学到了什么</title>
      <link>https://jupiterxue.github.io/posts/2021-08-02-learn-from-top-writer/</link>
      <pubDate>Mon, 02 Aug 2021 09:36:25 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-08-02-learn-from-top-writer/</guid>
      <description>下定决心想要做好写文章的习惯。给自己树立的目标是先行动起来，并且完成不那么困难的事情，当行动系统建立起来了，当日毕日更做到了，再是说更高的目标，更宏远的理想。
我创立这个公众号与技术博客（后续会开通）的原意在于做些技术分享，并且坚持更新，在一个领域中做到扎根与深入。我也清醒地认识到，这个目标过于长远，还得从长计议，因此目前的计划是给自己一个缓冲的时间，一天更新纯技术一天更新技术心得或生活感悟，这样不会有太大难度的技术壁垒，也能够形成一个缓冲期，后面形成了习惯就能做纯技术输出。
我认为，既然要开始写作，那么掌握写作的框架结构和常用套路是很有必要的。去看了几位写作名家谈论如何写作，包括：胡鞍钢、毛泽东、矛盾等。以下来谈谈我的心得体会。
胡大和毛大都强调写出好的文章第一个要注意的是了解和理解你的写作对象。并且你写的文章不是给自己看，而是要给别人看。并且要有服务读者的理念，写出让读者爱看的文章。
大人，时代变了。以前的我确实是这么想的，我们写文章最重要的是要了解读者是谁，然后才能写出好的文章。而对现在的从事互联网行业的我来说，我只是一个小喽喽，自己写的文章自己都不想看，何况别人看。虽然会编程的人都可以说自己是做互联网行业，但光就编程语言就有几十上百种，各种日新月异的技术层出不穷，互联网也有非常多的分支。所以我写文章的出发点更多的是写出自己都愿意看的文章，写自己领域的技术技能。
我一直以来的想法都是，如果写出的文章。自己也喜欢那么肯定能够吸引到和你一样的人。技术文章有时候讲起来过于细碎，有时候即便同方向的别人也不知道你在干什么。因此最后还是回到了：照顾好自己，吸引那些喜欢你、认可你的人。
第二点，也是三位大家都在强调的：反复修改文章。好的文章就像好的代码，虽然一开始跑的很快有初稿有初步代码，但想要修正自己的认知、提升自己的写作能力、突破自己的编程瓶颈就得真正做好这件事。更重要的是，要有勇气面对自己，接纳不完美的自己，拥抱你能够做得更好的地方。
最后一点是矛大所说的，向生活学习。我向来认为，一个会生活的人，写出的文章是能够从中体会到柴米油盐酱醋茶的酸甜苦辣。一个会编程的人，写出的代码是洞悉世界的底层规律，严谨且确定的。同时艰巨这二者的人，便是会生活，会编程，懂得学习与接纳，拥有自己思想的人。简单的说，就是你们所谓，我之所想的——有趣的人。比如我公众号第一篇文章，就是我非常喜爱的一位既是编程者也是写作者的人。
今天也是我写作日更第一天的开始，时间有点压。明天开始还是要早点行动，早点完成写作。先建立行动习惯，再去尝试更多想法。先做到提前写作，再做到超前写作。一起加油。</description>
    </item>
    
    <item>
      <title>Grafana 条形图实践</title>
      <link>https://jupiterxue.github.io/posts/2021-07-29-grafana-bar-chart/</link>
      <pubDate>Thu, 29 Jul 2021 09:56:39 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-07-29-grafana-bar-chart/</guid>
      <description>前言 可视化平台有很多，最重要的是选择符合业务需求的方案，费用低、学习曲线低、易于上手、集成性好这些都是加分项。众望所归，我选择了 Grafana。
特点 让我们康康 Grafana 是怎样的：
 免费。Grafana 是一个开源的独立日志分析和监视工具。 开发少可直接用。面向分析师和一般使用者，一般不需要做多少编码工作就能直接拿来分析数据、搭建可视化系统。 界面炫酷。来看看官网的展示 Grafana 官网概述 丰富集成。Grafana 是跨平台工具，它提供了与各种平台和数据库的集成，持 InfluxDB，AWS，MySQL，PostgreSQL 等。 用户交互体验好。展示连续实时监控指标（如 CPU 负载，内存）、对数据提供自定义实时警报、提供基于数据库及其查询语法的命令列界面。  准备工作-采集器 一个可视化平台，重要的是有数据来做支撑，像上面所说的数据库。本文采取具有灵活查询和实时报警构建的时序数据库 promethues 来作为数据管理端。
作为圣火的传人，promethues 有着各种采集器小弟，如服务器资源采集器 node-exporter、进程资源采集器 process-exporter、服务资源采集器 blackbox-exporter， 有了这些采集器就可以直接搭建起监控和警报
服务器监控 进程监控 服务监控 最后再配有 docker 微服务，你的监控和警报平台就能够一键部署起来了。 准备工作-定制化 有了各种采集器，其实能够满足大部分通用监控的需求，但往往我们的业务是不一样的，那么就需要进行定制。
用到了胶水语言 Python 在 promethues 的模块 promethues_client，就能开始定制了！
制作一个条形图 其实这个标题，我最先想取 “fuck the bar chart”，其他定制化的数据，表格、饼图、折线图都是能够在粗略熟悉 Grafana 后可以自己上手做的。
而这个条形图困扰了我整整一周的时间，各种找插件、换版本、调格式、选展示方式，都没有达到理想效果：
今天来彻底搞定这个问题！！
版本    工具 版本     Docker 1.13.1   Go 1.</description>
    </item>
    
    <item>
      <title>Python 答疑复盘</title>
      <link>https://jupiterxue.github.io/posts/2021-07-28-python-replay/</link>
      <pubDate>Wed, 28 Jul 2021 09:49:15 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-07-28-python-replay/</guid>
      <description>在成长会中，我们会自发组建小组学习各种知识与技能，比如新概念英语朗读、经济学专题晨读、瘦下来、相亲、太极、书法、早起锁定以及 Python 基础入门小组。如果没有你感兴趣的小组，也可以你来组建这么个小组，因为，成长会的同学五湖四海，肯定有喜欢你的人 :)
今年的 2 月到 6 月我在保险学专题晨读活动中担任小队队长，听起来有点高大上，做起来就是催作业（其实不是）。我们的晨读活动是每天看一两章专业领域的书，然后当天答题，没答题的就会被踢出群。而我作为队长，并没有过多地去催作业，我们小队的同学都比较自觉，嘻嘻。更重要的是，在担任队长期间，我去开发了一套小程序，能够帮助我和其他12个队长统计作业、统计没有完成名单、收集本队作业以及统计复盘。虽然已经有一套比较复杂的工程软件来统计，但普通人一般用不了，比较麻烦，所以最后还是落到人工统计上，而队长所谓的人工统计，就是让队员自己统计？自从我在当队员的时候看到这个问题，就开始萌生要做一个统计软件的想法。现在已经实现了，并且不同主题晨读活动的队长拿着我的代码也能够进行作业统计，只需要看我的文档就会操作，一般不需要辅导。因为里面已经有封装为 exe 的程序或者源码和一两部操作就能跑的说明。
大概7月初，我们在成长会的知识星球会写个人的半年总结，我写到了些事。有一天一个成长会的同学想组织大家学 Python，通过知识星球的半年总结帖发现了我 Python 用的还可以，就让我进入小组担任答疑官。于是就有了今天组织大家线上答疑复盘的经历。
我是在早上醒来发现这位 Python 学习小组长来联系，邀请我进行答疑，询问我的时间情况。就今天拉。然后她收集好大家在学 Python 过程中的问题便发了一份 Jupyter 打开的文件给我。我也在抽空的时间写了笔记并且提供给大家提前看了看，也算是我从另外一位答疑官朋友那里吸取的翻车经验吧——即便自己能力再厉害，遇到基础还是要踏踏实实。
今晚也算是我第一是上麦直播分享纯 Python 技术，这种体验对我来说真的不一样。以前一直想有机会开直播讲解技术，但一直感觉自己的技术能力很差不够格去讲。现在深刻感悟到，我已经踏进门了一步，相比于想要入门的同学，分享的任何东西相对来说都是对他们有价值的。同时也发现，对基础概念的理解需要细细揣摩才能理解。同学们问的基础问题也值得留意，因为自己当初也是那么稀里糊涂地过来的，现在还能回答上吗？如果不能那就赶紧动起来，二次学习的机会到了！
其实这是第一次讲授代码的课，一开始我陷入了一句句讲解代码的过程，讲了第一题我自己就觉得有点累遭不住，美其名曰地问了一句大家觉得我这个讲解方式还适应吗，其实是想让大家说只想听思路，hhh。现在看来，一句句讲解是有必要的，一句句代码给大家演示也是有必要的，因此需要做好基本功的储备。同时，授课的时候要去倾听听众的感受，让我们一起将这堂课圆满完成。</description>
    </item>
    
    <item>
      <title>Go 实用小工具</title>
      <link>https://jupiterxue.github.io/posts/2021-07-26-go-tools-kit/</link>
      <pubDate>Mon, 26 Jul 2021 11:00:46 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-07-26-go-tools-kit/</guid>
      <description>Go 小工具 执行命令行 1package main 2 3import ( 4	&amp;#34;flag&amp;#34; 5	&amp;#34;fmt&amp;#34; 6	&amp;#34;runtime&amp;#34; 7 &amp;#34;os/exec&amp;#34; 8 &amp;#34;strings&amp;#34; 9) 10 11func main() { 12	// flag 包使用方法：flag.Type(&amp;#34;flagName&amp;#34;,defaultValue,&amp;#34;help message&amp;#34;) *Type 13	var name = flag.String(&amp;#34;name&amp;#34;,&amp;#34;ls&amp;#34;,&amp;#34;info: 命令&amp;#34;) 14	var args = flag.String(&amp;#34;args&amp;#34;,&amp;#34;-h&amp;#34;,&amp;#34;info: 多个参数&amp;#34;) 15 flag.Parse() 16	fmt.Println(*name) 17	fmt.Println(*args) 18	cmd := *name + &amp;#34; &amp;#34; + *args 19	fmt.Println(&amp;#34;Command: %s&amp;#34;, cmd) 20	out, err := exec.Command(&amp;#34;bash&amp;#34;, &amp;#34;-c&amp;#34;, cmd).CombinedOutput() 21	if runtime.GOOS == &amp;#34;windows&amp;#34; &amp;amp;&amp;amp; err !</description>
    </item>
    
    <item>
      <title>王垠的智慧</title>
      <link>https://jupiterxue.github.io/posts/2021-07-23-idea-from-wangyin/</link>
      <pubDate>Fri, 23 Jul 2021 18:21:05 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-07-23-idea-from-wangyin/</guid>
      <description>王垠的智慧 王垠是谁？去谷歌知乎简单搜搜就能很快知道这个大名鼎鼎之人。对我来说，他是具有叛逆精神、擅长质疑与逻辑推断的人。他的求学经历让我感到惋惜，与此同时，他的学习能力让我膜拜，他对计算器编译器的深刻洞见让我崇拜。最让我痴迷的是，还是他在自己的博客 “当然我在扯淡”中记录了四篇他的智慧：
参考链接
《编程的智慧》http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy
《生活的智慧》http://www.yinwang.org/blog-cn/2017/07/08/living-philosophy
《旅行的智慧》http://www.yinwang.org/blog-cn/2017/08/14/travel-wisdom
《学习的智慧》http://www.yinwang.org/blog-cn/2019/07/12/learning-philosophy
心得感悟 我是从大学开始接触编程，也是从大学才接触到的王垠。那时候无意之间闯入了 GNU 的新世界，王垠已经在这个广阔天地被人们称为了大牛。和计算机课本上那些枯燥、机械的例子不同，他将算法的思想融入到了生活的点点滴滴当中。不管你是否是从事计算机行业，相信看了这几篇文章都会被他的思想吸引住，想去一一尝试一下。
如果你从事计算机行业，掌握编程，那么你很荣幸，我们最大的乐趣就在于创造，它能让你脱离低级的趣味。我们学习技术，最直观的学习是在实践中进行的，学了代码就去写，掌握思想就能改，实践多了就能大胆创新。这时候，编辑器你的画笔，可以让你成为神笔马良；编译器是你的电脑笔友，细心地告诉你在哪里你要去往哪里。
我们做程序的，习惯叫自己程序员 / 程序媛 / 码农，就从码农可以看出，是勤勤恳恳的。确实，在编程领域当中，一分耕耘一分收获。大家学习技术，也许不单纯为了一份工作，我相信热爱技术的你，是想通过自己的双手，通过对技术的理解，创造出对世界、对社会有价值、有贡献的东西。当然，我们沉迷技术，却不是脱离生活，我们希望技术能够改善生活，我们希望算法的思想能够让这个社会变得更加美好，我们希望这个世界变得更加智慧。
生活不止眼前的代码，还有流淌于柴米油盐之间的智慧。
参考资料 [1]
[2] 最“狂”天才，保送清华读博，3次退学，怒怼阿里 P10，被微软全球封杀！ https://jishuin.proginn.com/p/763bfbd2b5c2</description>
    </item>
    
    <item>
      <title>Algorithms - Graphs</title>
      <link>https://jupiterxue.github.io/posts/2020-05-01-algorithms-graphs/</link>
      <pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2020-05-01-algorithms-graphs/</guid>
      <description>Undirected Graphs Some problems  Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once  classical NP-complete problem.   Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical?  No one knows so far. A lonstanding open problem    Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description>
    </item>
    
    <item>
      <title>Racket notes</title>
      <link>https://jupiterxue.github.io/posts/2020-02-29-racket/</link>
      <pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2020-02-29-racket/</guid>
      <description>Basic 1#lang racket 2(provide (all-defined-out)) 3 4;this is a comment 5 6(define s &amp;#34;hello&amp;#34;) 7 8(define x 3) 9(define y (+ x 2)) 10 11(define cube1 12 (lambda (x) 13 (* x (* x x)))) 14 15(define cube2 16 (lambda (x) 17 (* x x x))) 18 19(define (cube3 x) 20 (* x x x)) 21 22(define (pow1 x y) 23 (if (=y 0) 24 1 25 (* x (pow1 x (- y 1))))) 26 27; currying 28(define pow2 29 (lambda (x) 30 (lambda (y) 31 (pow1 x y)))) 32 List  Empty list: null  () doesn&amp;quot;t work for null but &#39;() does   build a list: (list e1 .</description>
    </item>
    
    <item>
      <title>ruby学习笔记</title>
      <link>https://jupiterxue.github.io/posts/2016-12-08-ruby-notes/</link>
      <pubDate>Thu, 08 Dec 2016 22:54:49 +0000</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2016-12-08-ruby-notes/</guid>
      <description>regular expressions =~是用于正则表达式的匹配操作符。返回匹配到的字符串位置或nil。
1&amp;#34;abcdef&amp;#34; =~ /d/ # return 3 2&amp;#34;aaaaaa&amp;#34; =~ /d/ # return nil !和? The exclamation point (!, sometimes pronounced aloud as &amp;ldquo;bang!&amp;quot;) indicates something potentially destructive, that is to say, something that can change the value of what it touches.
ruby&amp;gt; s1 = &amp;quot;forth&amp;quot; &amp;quot;forth&amp;quot; ruby&amp;gt; s1.chop! # This changes s1. &amp;quot;fort&amp;quot; ruby&amp;gt; s2 = s1.chop # This puts a changed copy in s2, &amp;quot;for&amp;quot; ruby&amp;gt; s1 # .</description>
    </item>
    
  </channel>
</rss>
