<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 木夜星空的个人博客</title><link>https://jupiterxue.github.i/tags/python/</link><description>Recent content in Python on 木夜星空的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>JupiterXue</copyright><lastBuildDate>Thu, 29 Jul 2021 09:56:39 +0800</lastBuildDate><atom:link href="https://jupiterxue.github.i/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Grafana 条形图实践</title><link>https://jupiterxue.github.i/posts/2021-07-29-grafana-bar-chart/</link><pubDate>Thu, 29 Jul 2021 09:56:39 +0800</pubDate><guid>https://jupiterxue.github.i/posts/2021-07-29-grafana-bar-chart/</guid><description>前言 可视化平台有很多，最重要的是选择符合业务需求的方案，费用低、学习曲线低、易于上手、集成性好这些都是加分项。众望所归，我选择了 Grafana。
特点 让我们康康 Grafana 是怎样的：
免费。Grafana 是一个开源的独立日志分析和监视工具。 开发少可直接用。面向分析师和一般使用者，一般不需要做多少编码工作就能直接拿来分析数据、搭建可视化系统。 界面炫酷。来看看官网的展示 Grafana 官网概述 丰富集成。Grafana 是跨平台工具，它提供了与各种平台和数据库的集成，持 InfluxDB，AWS，MySQL，PostgreSQL 等。 用户交互体验好。展示连续实时监控指标（如 CPU 负载，内存）、对数据提供自定义实时警报、提供基于数据库及其查询语法的命令列界面。 准备工作-采集器 一个可视化平台，重要的是有数据来做支撑，像上面所说的数据库。本文采取具有灵活查询和实时报警构建的时序数据库 promethues 来作为数据管理端。
作为圣火的传人，promethues 有着各种采集器小弟，如服务器资源采集器 node-exporter、进程资源采集器 process-exporter、服务资源采集器 blackbox-exporter， 有了这些采集器就可以直接搭建起监控和警报
服务器监控 进程监控 服务监控 最后再配有 docker 微服务，你的监控和警报平台就能够一键部署起来了。 准备工作-定制化 有了各种采集器，其实能够满足大部分通用监控的需求，但往往我们的业务是不一样的，那么就需要进行定制。
用到了胶水语言 Python 在 promethues 的模块 promethues_client，就能开始定制了！
制作一个条形图 其实这个标题，我最先想取 “fuck the bar chart”，其他定制化的数据，表格、饼图、折线图都是能够在粗略熟悉 Grafana 后可以自己上手做的。
而这个条形图困扰了我整整一周的时间，各种找插件、换版本、调格式、选展示方式，都没有达到理想效果：
今天来彻底搞定这个问题！！
版本 工具 版本 Docker 1.13.1 Go 1.</description></item><item><title>Python 答疑复盘</title><link>https://jupiterxue.github.i/posts/2021-07-28-python-replay/</link><pubDate>Wed, 28 Jul 2021 09:49:15 +0800</pubDate><guid>https://jupiterxue.github.i/posts/2021-07-28-python-replay/</guid><description>在成长会中，我们会自发组建小组学习各种知识与技能，比如新概念英语朗读、经济学专题晨读、瘦下来、相亲、太极、书法、早起锁定以及 Python 基础入门小组。如果没有你感兴趣的小组，也可以你来组建这么个小组，因为，成长会的同学五湖四海，肯定有喜欢你的人 :)
今年的 2 月到 6 月我在保险学专题晨读活动中担任小队队长，听起来有点高大上，做起来就是催作业（其实不是）。我们的晨读活动是每天看一两章专业领域的书，然后当天答题，没答题的就会被踢出群。而我作为队长，并没有过多地去催作业，我们小队的同学都比较自觉，嘻嘻。更重要的是，在担任队长期间，我去开发了一套小程序，能够帮助我和其他12个队长统计作业、统计没有完成名单、收集本队作业以及统计复盘。虽然已经有一套比较复杂的工程软件来统计，但普通人一般用不了，比较麻烦，所以最后还是落到人工统计上，而队长所谓的人工统计，就是让队员自己统计？自从我在当队员的时候看到这个问题，就开始萌生要做一个统计软件的想法。现在已经实现了，并且不同主题晨读活动的队长拿着我的代码也能够进行作业统计，只需要看我的文档就会操作，一般不需要辅导。因为里面已经有封装为 exe 的程序或者源码和一两部操作就能跑的说明。
大概7月初，我们在成长会的知识星球会写个人的半年总结，我写到了些事。有一天一个成长会的同学想组织大家学 Python，通过知识星球的半年总结帖发现了我 Python 用的还可以，就让我进入小组担任答疑官。于是就有了今天组织大家线上答疑复盘的经历。
我是在早上醒来发现这位 Python 学习小组长来联系，邀请我进行答疑，询问我的时间情况。就今天拉。然后她收集好大家在学 Python 过程中的问题便发了一份 Jupyter 打开的文件给我。我也在抽空的时间写了笔记并且提供给大家提前看了看，也算是我从另外一位答疑官朋友那里吸取的翻车经验吧——即便自己能力再厉害，遇到基础还是要踏踏实实。
今晚也算是我第一是上麦直播分享纯 Python 技术，这种体验对我来说真的不一样。以前一直想有机会开直播讲解技术，但一直感觉自己的技术能力很差不够格去讲。现在深刻感悟到，我已经踏进门了一步，相比于想要入门的同学，分享的任何东西相对来说都是对他们有价值的。同时也发现，对基础概念的理解需要细细揣摩才能理解。同学们问的基础问题也值得留意，因为自己当初也是那么稀里糊涂地过来的，现在还能回答上吗？如果不能那就赶紧动起来，二次学习的机会到了！
其实这是第一次讲授代码的课，一开始我陷入了一句句讲解代码的过程，讲了第一题我自己就觉得有点累遭不住，美其名曰地问了一句大家觉得我这个讲解方式还适应吗，其实是想让大家说只想听思路，hhh。现在看来，一句句讲解是有必要的，一句句代码给大家演示也是有必要的，因此需要做好基本功的储备。同时，授课的时候要去倾听听众的感受，让我们一起将这堂课圆满完成。</description></item></channel></rss>