<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>经典书 on 木夜星空的个人博客</title>
    <link>https://jupiterxue.github.io/tags/%E7%BB%8F%E5%85%B8%E4%B9%A6/</link>
    <description>Recent content in 经典书 on 木夜星空的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>JupiterXue</copyright>
    <lastBuildDate>Wed, 08 Sep 2021 23:25:30 +0800</lastBuildDate><atom:link href="https://jupiterxue.github.io/tags/%E7%BB%8F%E5%85%B8%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读经典《DDIA》-第一章</title>
      <link>https://jupiterxue.github.io/posts/2021-09-08-ddia-chapter1/</link>
      <pubDate>Wed, 08 Sep 2021 23:25:30 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-09-08-ddia-chapter1/</guid>
      <description>算是等了好久，终于有机会来读这本书《Designing Data Intensive Applications》，中文名《设计数据密集型应用》，我们一般简称《DDIA》或者猪书（因为书的封面是一头野猪，Hog Riderrrrr～！）。读完这本书第一章，我也想极力向推荐给计算机和互联网行业做后端和服务端的同学。阅读背景 最初了解这本书是在曹大（曹春晖）的第一堂课上。曹大说自己看了那么多书，只有这一本是最好的，也推荐给大家（当时听完就有点热血沸腾）。后来我还发现，draveness 大佬在它的《程序员可能必读书单推荐（一）》https://draveness.me/books-1/ 中最后一本也提到了此神书。再后来，又去豆瓣看了看，中英文都是 9.7 分：
简单介绍一下，读《DDIA》能够 帮助我们建立一个分布式系统的全局概念，但还需要根据自己所在行业、所处业务和所面对的需求。前面一些章节和 rpc 有关系，中间一些和存储关系比较大，后面将大数据和流式计算。内容比较全，看完就知道分布式系统有哪些问题。
一个人可以走得很快，而一群人能够走得很远。读这本书，其实我是参与了一个小组的 github 读书项目，如果你感兴趣也可以联系我，我们一起参与这次读书之旅。
好，话不多说，开始卷！（以下为我简明扼要摘录的笔记，可以快速浏览）
第一章笔记 为什么要设计 现今很多应用程序都是 数据密集型（data-intensive） 的，而非 计算密集型（compute-intensive） 的。
CPU很少成为这类应用的瓶颈，更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。
数据密集型应用：
- 存储数据
- 缓存
- 索引
- 流处理
- 批处理
看上去平淡无奇是因为数据系统在抽象层面做得非常成功。工程师常常直接拿来用，而不是自己去做开发，因为数据库已经足够完美。
然而现实中还有各种不同的需求：多种缓存，多级搜索。重要的是有必要先弄清楚最适合当前业务的工具和方法。当单个工具已经解决不了我们的问题时，组合使用也有些难度。因此本书在探索如何设计数据密集应用的方法，以实现可靠、可伸缩、可维护的数据系统。
数据系统的思考 按我们的常识，为认为数据库、消息队列、缓存这些工具都是有差异的，但我们还是归类为 数据系统当中。虽然新出现了许多数据存储工具和数据处理工具，但类别之间的界限越来越模糊，比如：数据存储可以作为消息队列（Redis），消息队列带有类似数据库的持久保证（Apache Kafka）。
当单个工具不足以满足所有数据处理和存储需求，就需要将总体工作拆分成一系列能够被单个工具高效完成，并且通过应用代码缝合起来。如缓存（Memcached）和全文搜索（ES）结合将主数据库剥离，由应用代码来让缓存或索引和主数据库保持同步。
一个可能的组合使用多个组件的数据系统架构
多个工具组合提供服务，服务的接口或应用程序编程接口 API 会向客户隐藏实现细节。
设计 DIA 会遇到问题：系统故障，如何保证数据正确性和完整性？系统退化降级，如何给客户提供始终如一的良好性能。负载增加，如何扩容？什么样的 API 是好的？
影响设计的因素：参与者技能和经验、历史遗留问题、系统路径依赖、交付时限、公司风险容忍度、监管约束。
本书重点讨论：
- 可靠性。在 adversity 中（包括：硬件、软件、人为 故障或错误）仍可以正常工作。
- 可伸缩性。合理应对系统增长（数据量，流量，复杂性）
- 可维护性。不同参与者，在不同生命周期都能高效地在系统上工作（适应新的应用场景）。
可靠性 常见期望：
- 符合用户期望的功能
- 允许出错，还能正常使用软件</description>
    </item>
    
  </channel>
</rss>
