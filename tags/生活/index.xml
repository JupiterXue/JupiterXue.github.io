<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生活 on 木夜星空的个人博客</title>
    <link>https://jupiterxue.github.io/tags/%E7%94%9F%E6%B4%BB/</link>
    <description>Recent content in 生活 on 木夜星空的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>JupiterXue</copyright>
    <lastBuildDate>Tue, 30 Nov 2021 00:16:11 +0800</lastBuildDate><atom:link href="https://jupiterxue.github.io/tags/%E7%94%9F%E6%B4%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为什么学编程要学会抄代码？</title>
      <link>https://jupiterxue.github.io/posts/2021-11-30-why_learning_coding_by_copy/</link>
      <pubDate>Tue, 30 Nov 2021 00:16:11 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-30-why_learning_coding_by_copy/</guid>
      <description>最近有位小伙伴要迎来算法考试了，因为本来不是计算机相关的专业，对编程还不够熟悉。即便在图书馆借阅了一本算法设计的书，还是感到数据结构基础不太踏实。当时我给她的学习建议是先做一些自己能够做的事情，比如抄代码。
外行可能不懂，但一些同行的朋友你们可能要嘲讽了：编程这事，和练字是有区别的。练字训练的是肌肉记忆，而编程训练的是大脑，训练的是思维方式，千万不能教别人做这些类似抄写、背诵、默写等这样的傻事，费力不讨好。再来看看我文章的标题“为什么学编程要，学会抄代码？“
在我读大学的时候，其实我也想过，抄代码真的没意思，又不能理解，最后还不是写不出来。而到了期末实验的考试，那时候发生了一件事真的颠覆了我的想法。当时我们学习的也是数据结构与算法 C++ 版的，这门课不仅是我们计算机学院的同学在上，没想到经济管理学院的同学也在上。也还记得第一堂实验课的时候，老师说，你们都是计算机学院的，考试不用怕！经管学院的同学也在上，她们还不怎么接触电脑呢。
结果，，，老师你不讲武德！最后考试居然是快排！虽然当时能够理解快排的思想，但代码不是很熟悉、不怎么记得。所以在机考的时候就一点点调试，忘不了那个酸爽。奇怪的是，经管的那些大部分同学反而做得比我们学院的快。因为那时是老师检查一个，就打一个分，然后让这位同学离开。陆陆续续有好几个同学都走了，只剩下我和几个同学傻 fufu 地在调试。我就好奇地问老师，她们是都不会做就走了吗。老师笑了笑，别看她们不懂编程，她们会背代码，考试的时候就一个个地敲出来的。这心情就像——17张牌你能秒我？你能秒杀我？17张牌你今天能把我 lbw 秒了，我当场就把这个电脑屏幕吃掉！
现在仔细想来，不管是背代码、抄代码，也是需要掌握时机、掌握方法论的。经管学院的同学因为熟悉编程，单纯凭借理解来“推导”代码，肯定比不上计算机专业的同学，而她们运用了自己擅长的、能做的，背代码。不可否认，在应试教育中，这种模式是值得认可的，从解决问题角度，这种方式是最快速有效的。
思考过这个问题，也对我在最近练习力扣刷题中没有感到迷茫。计算机专业，连二分查找都写不出来，其实也是因为好几年没有经过算法练习。第一遍不会做跟着题解抄，第二遍有点印象写了大部分再看看完善，第三遍得心应手了，并且能够灵活计算中间值和边界条件。在之后遇到更加复杂困难的问题时，也能够耐心地去看题解、将答案多敲几遍来理解推导过程。而不是像刷题评论的一样，一直处于这样的心理状态：
所以在真正开始学习的时候，你会深深地感觉到自己的无知，尤其是在面对最能划分编程能力的算法和数据结构中。而学习的本质是什么？是通过听说读写、思考研究和实践，最终获得知识的过程。能够让你加深对问题的理解，才是有效的。
明白了这个之后，还需要认识到自己对编程的理解到底怎样。如果从来没有接触过编程，那么一个字一个字地抄代码，快速熟悉代码，就能在实践中加深对问题的理解。如果已经有编程经历了，遇到复杂问题可能会浮躁，学不进去，而一个字一个字地抄代码，将阅读速度降下来，将躁动的心平静下来，能够去思考问题的边界、代码所表达的含义。
这还不够。当你做到了会抄代码，你还需要思考编程的本质是什么。程序的执行过程是抽象的，它是不可见的，而代码的编写是需要精细化、具象化的。不是像你想象中的开车或者游泳一样，你一打方向盘就能转弯，腿一蹬就能往前游。假如你是开车转弯，你是要思考的是往哪个方向转，转多少度，手握在哪个位置才能转动，是需要一只手还是两只手转向才能及时。平时我们如果真这么边想边开车，可能都要出交通事故了。
所以，还不能抄代码。想要学会编程，你得理解思想，你得将理论用代码实现出来。这个过程是非常难的。书中的知识，有了小学语文基础就能看懂，我也能给你画图形象化地表述。但你也只能理解大概的意思，还是无法写出代码。那么怎么办？通过大量的练习，来掌握写代码的思路。比如见过几个可以运行的 c 程序代码，你知道要运行需要有 main 函数，要输出需要有 print 函数。
这么一说，好像又很简单了。知道每句代码是什么意思就会编程，了？我现在不想转弯，我想转向了，那你还能知道怎么“编程”了吗？别着急，你已经开始会了。
我们开始学习编程，往往也是从看得见和摸得着的东西开始的。如果现在没有任何办法，感到学习异常困难，可以先尝试抄代码；如果有了编程的感觉，尝试自己去改动代码。在随后学习了分而治之的算法思想后，我们会将复杂问题划分为小问题，一个个解决，将每一处你能够做到的地方完成，时间累积下来。也许某一天，你开始学会编程，开始慢慢理解，抄代码对自己的编程提高，到底是否有用。</description>
    </item>
    
    <item>
      <title>程序员的终极法宝？</title>
      <link>https://jupiterxue.github.io/posts/2021-11-25-outstanding_tech_or_concept/</link>
      <pubDate>Thu, 25 Nov 2021 15:39:05 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-25-outstanding_tech_or_concept/</guid>
      <description>也有人说，会搜索就能击败 90% 的人。但是
不可否认，大千世界无奇不有，突飞猛进的方法也许真的存在。 但问题是，你也需要花时间去学习，去尝试、去实践啊。查理·芒格说过，我的剑留给能够挥舞他的人。他有着 100 多个思维模型，又有谁能够全部掌握，又有多少人能够真正理解其中的道理。更可怕的是，有时我们迫切希望现在糟糕的处境能有改观，羡慕别人拥有的自己也能很快获得，所以一些付费课、营销局、诈骗信的妖魔鬼怪都无孔不入。屠龙宝刀无人拿起，屠龙者最终成了恶龙。最终我们是花了钱去学习那些“标题”，最终一无所获。
你想获得的突飞猛进的概念或技术，本质上还是逃不开你人性中想要一夜暴富急功近利的心理。 有些东西真的不是靠一时之间就能改变，它叫做时间的壁垒。
凭什么你花了好几年时间，看了好十几本关于编程的书，练习了几百上千道 Leetcode 的题，而有人十天半个月突击就说他掌握了某些知识或者框架，就能超过你的理论基础、超过你的编码能力？
凭什么你耐心耐心耐心和别人沟通磨合项目，被产品、领导挨骂挨骂挨骂，终于懂得了一点如何去做好一个产品，如何去。
凭什么
这些都是时间的壁垒，一般人无法超过，真的。如果能很快超过你，说明人家本来就和你不在一条赛道的，别人自小聪明，家境优越，师从名师，师出高校。自大小就开始学习编程，参加算法竞赛。别人很快超过你都是有原因的，也正因如此，别人和你的竞争不在单一的努力方向，而是家族、资产、社会地位等等。
所以，年轻人讲点武德，不要好高骛远，不要想着一夜暴富，踏踏实实地做好自己该做的事，上课认真听课，工作认真完成，学习不偷工减料，做事不拖泥带水，你的每次认真付出，就是你最大的法宝。
最后也引用来自 encro 的一句话作为本文的结尾
 既然你允许存在“突飞猛进”，那么也不要怀疑会存在“突然消失”。
 </description>
    </item>
    
    <item>
      <title>如何训练逻辑思维？</title>
      <link>https://jupiterxue.github.io/posts/2021-11-23-how_to_training_logic/</link>
      <pubDate>Tue, 23 Nov 2021 22:59:35 +0800</pubDate>
      
      <guid>https://jupiterxue.github.io/posts/2021-11-23-how_to_training_logic/</guid>
      <description>我们总会羡慕那些心思缜密、妙语连珠、出口成章的人，也会在惊讶之后转瞬欣赏那些金句频频、有理有据、一针见血的人。这些人我们在诸如辩论赛场上、突发事件报道记者身上、外交官回复上都或多或少有见到。他们的这些能力，我们习惯性地归纳为逻辑思维。并且我们对生活中许多能够提高逻辑思维的东西趋之若鹜。可惜的是，费时费钱，还是没能将逻辑思维提高到理想中的高度。今天，就来揭开到底什么是“逻辑思维”、怎样训练提高逻辑思维的神秘面纱。
在谈逻辑思维之前，需要先请出它的另外一位朋友“形象思维”，也叫做艺术思维。其实也就是我们平时在生活中眼睛看到的、耳朵听到的、鼻子闻到的、嘴里尝到的以及身体接触感受到的，我们能够对这些“感受”进行理解、描述、表达和记录。因为这些都是实实在在的东西，通过我们的五官能够去体会到。
而逻辑思维不是这样的，逻辑思维也叫做抽象思维。是借助不存在与现实世界中的东西，来帮助我们更好理解、便于记忆、做出结论的思维运动。即我们人在认识事物过程中，借助了概念、判断、推理等思维形式，去将现实抽象为概念、揭示除了事物与现象背后的本质，进而能够认识世界并改造世界。
这么说有点抽象了，再来说说逻辑思维中常用的方法，就能很好理解了，这些方法其实我们从小学就已经开始掌握，只是我今天再把它们都拎了出来。
  分析与综合。分析是在思维中把对象分解为各个部分或因素，分别加以考察的逻辑方法。综合是在思维中把对象的各个部分或因素结合成为一个统一体加以考察的逻辑方法。
  分类与比较。根据事物的共同性与差异性就可以把事物分类，具有相同属性的事物归入一类。具有不同属性的事物归入不同的类。比较就是比较两个或两类事物的共同点和差异点。通过比较就能更好地认识事物的本质。分类是比较的后继过程，重要的是分类标准的选择，选择的好还可导致重要规律的发现。
  归纳与演绎。归纳是从个别性的前提推出一般性的结论，前提与结论之间的联系是或然性的。演绎是从一般性的前提推出个别性的结论，前提与结论之间的联系是必然性的。
  抽象与概括。抽象就是运用思维的力量，从对象中抽取它本质的属性，抛开其他非本质的东西。概括是在思维中从单独对象的属性推广到这一类事物的全体的思维方法。抽象与概括和分析与综合一样，也是相互联系不可分割的。
  最后再来说说，怎样训练逻辑思维？其实方法很简单——写作，认真对待你写的每样东西。如果你写不清楚，那就是代表你没想清楚。
这么说明白了吗？还是不太明白，那么以上我所说的都是白说的，因为前面我的这句话也在引导你进行思考，也是希望你能够组织语言去表达，怎样训练逻辑思维。要想训练逻辑思维，需要的是多去细致地观察生活，借助以上四种逻辑思维方法去用文字记录，最后刻意提炼出对你有帮助、有价值的信息。
通过写作能够锻炼思考，但不一定能提高逻辑性。而不写作的话，在平时是很难说去刻意去提高自己的逻辑思维能力的，毕竟，很多时候我们只想把作业早点完成，把工作早点做完。所以，写吧！</description>
    </item>
    
  </channel>
</rss>
